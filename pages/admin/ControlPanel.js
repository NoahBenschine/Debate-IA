import React,{useState} from "react"

import { Container, Row, Col } from 'react-bootstrap';
import Head from "next/head"
import Link from "next/link"
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import TextField from '@mui/material/TextField';
import VirtualizedList from "./VirtualizedList";
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';
import styles from "../../styles/Admin.module.css";
import {getSession, useSession } from "next-auth/react";
import useSWR from 'swr'
import $ from 'jquery';



const fetcher = (...args) => fetch(...args).then(res => res.json())
function useUser(id,token) {
  const { data, error } = useSWR([`/api/db/Calls/${id}`,token], fetcher,{ refreshInterval: 10000 } )

    return {
      user: data,
      isLoading: !error && !data,
      isError: error

    }
}
export default function Main(){
const [input,setInputStates] = useState({changeTopic:"",addAdmin:"",setTime:""})
  const { data: session} = useSession();
  console.log(session);


const {user,isLoading,isError} = useUser("adminHandler",{headers:{adminMethod:"getUsers"}})
console.log(user);
console.log(typeof user);
  async function changeCurrentDebate(new_topic){
    const response = await fetch("/api/db/Calls/adminHandler", {
      method: "POST",
      body: JSON.stringify({topic_name:new_topic,user:session.user.name}),
      headers: { adminMethod: "changeDebate" }
    })
    const agreement = response.text();
    agreement.then((result) => {
      console.log(result)
    })
  }



function handleChange(event){
  console.log(event.target);
    const { name, value } = event.target;
  setInputStates(prevState=>{
    if (name === "changeTopic") {
       return {
        changeTopic:value,
        addAdmin:prevState.addAdmin,
        setTime:prevState.setTime
       };
     } else if (name === "addAdmin") {
       return {
         changeTopic:prevState.changeTopic,
         addAdmin:value,
         setTime:prevState.setTime
       };
     } else if (name === "setTime") {
       return {
         changeTopic:prevState.changeTopic,
         addAdmin:prevState.addAdmin,
         setTime:value
       };
     }

})
console.log(input);
}
console.log(input);




  return(
     <div className={styles.container}>
    <Head>
    <title>Create Next App</title>
    <meta name="description" content="Generated by create next app" />
    <link
     rel="stylesheet"
     href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css"
     integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU"
      crossOrigin="anonymous"
    />
    </Head>


    <Box sx={{ flexGrow: 1 ,width:"100%"}}>
      <Grid container sx={{height:"100%"}} direction="column" >
        <Grid container item direction="row" lg={4} xs={4} sm={4} md={4} xl={4}  spacing={3}>
        <Button onClick={voteWinner} sx={{
          fontFamily: "Helvetica",
           fontSize: "1.5em",
           fontWeight: "bold",
          color: "#fff",
          backgroundColor: "#f5ba13",
          position:"absolute",
          top:"0%",
          left:"48%",
          width: "7%",
          height:"7%",

        }} className={styles.EndVoting} variant="contained" size="large">
             End Voting
             </Button>
        </Grid>
        <Grid container direction="row"lg={4} xs={4} sm={4} md={4} xl={4}  item spacing={1} >
        <TextField  className={styles.box_tf} id="outlined-basic" label="Change Current Debate"sx={{
          "& .MuiInputLabel-root": {
            color: "white",
          },
          "& .MuiInputBase-root": {
            color: "white",
          },
            marginLeft:"16%",
        }} value={input.changeTopic} variant="outlined" name="changeTopic" onChange={handleChange} onKeyPress={(e)=>{

          if (e.key === "Enter"){
             changeCurrentDebate(input.changeTopic);
          }
        }} />
        <TextField   sx={{
"& .MuiInputLabel-root": {
  color: "white",
},
"& .MuiInputBase-root": {
  color: "white",
},
  marginLeft:"16%",
}} id="outlined-basic" label="Add Admin" variant="outlined" value={input.addAdmin} name="addAdmin" onChange={handleChange} onKeyPress={(e)=>{

          if (e.key === "Enter"){
             addAdmin(input.addAdmin);
          }
        }} />
        <TextField   className={styles.box_tf} sx={{
          "& .MuiInputLabel-root": {
            color: "white",
          },
          "& .MuiInputBase-root": {
            color: "white",
          },
            marginLeft:"16%",
        }} id="outlined-basic" type="datetime-local"  variant="outlined" value={input.setTime} name="setTime" onChange={handleChange} onKeyPress={(e)=>{

          if (e.key === "Enter"){
            console.log("enter was pressed");
             setTime(input.setTime);
          }
        }}/>
        </Grid>
        <Grid lg={4} xs={4} sm={4} md={4} xl={4} sx={{width:"100%"}} container item direction="row">
        <Box className={styles.list_container}
          sx={{ width: "100%", height: "100%", maxWidth: 360, border:2
         }}
        >
     <VirtualizedList
       numItems={user?user.length:0}
             itemHeight={40}
             windowHeight={500}
             renderItem={({ index, style }) => {
               const i = user[index];
               console.log(i);
               return (
                 <ListItem style={style} key={index} component="div" disablePadding>
                 <ListItemText primary={i.user.name} />
                  </ListItem>
               );
           }}
     />

     </Box>
        </Grid>
      </Grid>
    </Box>






   <Link href="/choosing/main" passHref><Button className={styles.leaveAdminButton} sx={{
     fontFamily: "Helvetica",
      fontSize: "1.5em",
      fontWeight: "bold",
     color: "#fff",
     backgroundColor: "#f5ba13",
     position:"absolute",
     top:"0%",
     right:"0%",
     width: "7%",
     height:"7%",

    }} size="lg">Choose Side!</Button></Link>

   </div>
  )
}

//
// if(typeof window !== 'undefined') {
//
//   var add_admin = document.getElementById("add_admin");
//
//   // Execute a function when the user releases a key on the keyboard
//   add_admin.addEventListener("keyup", function(event) {
//     // Number 13 is the "Enter" key on the keyboard
//     if (event.keyCode === 13) {
//   console.log(event);
//     }
//   });
//
// }

  async function voteWinner() {
    const response = await fetch("/api/db/Calls/voteHandler", {
      method: "GET",
      headers: { voteMethod: "selectWinner" }
    })
    const agreement = response.json();
    agreement.then((result) => {
      console.log(result)
    })
  }


  async function addAdmin(new_admin){
    const response = await fetch("/api/db/Calls/adminHandler", {
      method: "POST",
      body: JSON.stringify({name:new_admin}),
      headers: { adminMethod: "addAdmin" }
    })
    const agreement = response.text();
    agreement.then((result) => {
      console.log(result)
    })
  }

  async function setTime(new_time){
    const response = await fetch("/api/db/Calls/adminHandler", {
      method: "POST",
      body: JSON.stringify({time:new_time}),
      headers: { adminMethod: "changeDebateTime" }
    })
    const agreement = response.text();
    agreement.then((result) => {
      console.log(result)
    })
  }
