generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://umrmaqjiosxlzz:19003182defd9632bc4ab99e883e17ff03eb9582be42f65c8c53cfff0139b89a@ec2-52-200-188-218.compute-1.amazonaws.com:5432/d1a4rmjasfh6co"
}

model debate {
  id         Int       @id @default(autoincrement())
  date       DateTime? @db.Timestamptz(6)
  topic_name String?   @db.VarChar(90)
  sides      sides[]
  vote       vote[]
}

model sides {
  id        Int     @id @default(autoincrement())
  topic_id  Int?
  owner_id  String?
  debate_id Int
  side      side?
  debate    debate  @relation(fields: [debate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  topic     topic?  @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model topic {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(80)
  owner_id String?
  sides    sides[]
  vote     vote[]
}

model vote {
  id        Int     @id @default(autoincrement())
  topic_id  Int?
  owner_id  String?
  debate_id Int
  debate    debate  @relation(fields: [debate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  topic     topic?  @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      account[]
  sessions      session[]
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum side {
  Pro
  Con
}
