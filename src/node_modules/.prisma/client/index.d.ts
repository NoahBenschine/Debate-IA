
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model debate
 * 
 */
export type debate = {
  id: number
  date: Date | null
  topic_name: string | null
}

/**
 * Model sides
 * 
 */
export type sides = {
  id: number
  topic_id: number | null
  owner_id: string | null
  debate_id: number
  side: side | null
}

/**
 * Model topic
 * 
 */
export type topic = {
  id: number
  name: string | null
  owner_id: string | null
}

/**
 * Model vote
 * 
 */
export type vote = {
  id: number
  topic_id: number | null
  owner_id: string | null
  debate_id: number
}

/**
 * Model account
 * 
 */
export type account = {
  id: string
  userId: string
  type: string
  provider: string
  providerAccountId: string
  refresh_token: string | null
  access_token: string | null
  expires_at: number | null
  token_type: string | null
  scope: string | null
  id_token: string | null
  session_state: string | null
  oauth_token_secret: string | null
  oauth_token: string | null
}

/**
 * Model session
 * 
 */
export type session = {
  id: string
  sessionToken: string
  userId: string
  expires: Date
}

/**
 * Model users
 * 
 */
export type users = {
  id: string
  name: string | null
  email: string | null
  emailVerified: Date | null
  image: string | null
}

/**
 * Model verificationToken
 * 
 */
export type verificationToken = {
  identifier: string
  token: string
  expires: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const side: {
  Pro: 'Pro',
  Con: 'Con'
};

export type side = (typeof side)[keyof typeof side]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Debates
 * const debates = await prisma.debate.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Debates
   * const debates = await prisma.debate.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.debate`: Exposes CRUD operations for the **debate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Debates
    * const debates = await prisma.debate.findMany()
    * ```
    */
  get debate(): Prisma.debateDelegate<GlobalReject>;

  /**
   * `prisma.sides`: Exposes CRUD operations for the **sides** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sides
    * const sides = await prisma.sides.findMany()
    * ```
    */
  get sides(): Prisma.sidesDelegate<GlobalReject>;

  /**
   * `prisma.topic`: Exposes CRUD operations for the **topic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Topics
    * const topics = await prisma.topic.findMany()
    * ```
    */
  get topic(): Prisma.topicDelegate<GlobalReject>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.voteDelegate<GlobalReject>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.accountDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.sessionDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **verificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.verificationTokenDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.6.0
   * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    debate: 'debate',
    sides: 'sides',
    topic: 'topic',
    vote: 'vote',
    account: 'account',
    session: 'session',
    users: 'users',
    verificationToken: 'verificationToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DebateCountOutputType
   */


  export type DebateCountOutputType = {
    sides: number
    vote: number
  }

  export type DebateCountOutputTypeSelect = {
    sides?: boolean
    vote?: boolean
  }

  export type DebateCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DebateCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DebateCountOutputType
    : S extends undefined
    ? never
    : S extends DebateCountOutputTypeArgs
    ?'include' extends U
    ? DebateCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof DebateCountOutputType ?DebateCountOutputType [P]
  : 
     never
  } 
    : DebateCountOutputType
  : DebateCountOutputType




  // Custom InputTypes

  /**
   * DebateCountOutputType without action
   */
  export type DebateCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DebateCountOutputType
     * 
    **/
    select?: DebateCountOutputTypeSelect | null
  }



  /**
   * Count Type TopicCountOutputType
   */


  export type TopicCountOutputType = {
    sides: number
    vote: number
  }

  export type TopicCountOutputTypeSelect = {
    sides?: boolean
    vote?: boolean
  }

  export type TopicCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TopicCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TopicCountOutputType
    : S extends undefined
    ? never
    : S extends TopicCountOutputTypeArgs
    ?'include' extends U
    ? TopicCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof TopicCountOutputType ?TopicCountOutputType [P]
  : 
     never
  } 
    : TopicCountOutputType
  : TopicCountOutputType




  // Custom InputTypes

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TopicCountOutputType
     * 
    **/
    select?: TopicCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    accounts: number
    sessions: number
  }

  export type UsersCountOutputTypeSelect = {
    accounts?: boolean
    sessions?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UsersCountOutputType ?UsersCountOutputType [P]
  : 
     never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model debate
   */


  export type AggregateDebate = {
    _count: DebateCountAggregateOutputType | null
    _avg: DebateAvgAggregateOutputType | null
    _sum: DebateSumAggregateOutputType | null
    _min: DebateMinAggregateOutputType | null
    _max: DebateMaxAggregateOutputType | null
  }

  export type DebateAvgAggregateOutputType = {
    id: number | null
  }

  export type DebateSumAggregateOutputType = {
    id: number | null
  }

  export type DebateMinAggregateOutputType = {
    id: number | null
    date: Date | null
    topic_name: string | null
  }

  export type DebateMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    topic_name: string | null
  }

  export type DebateCountAggregateOutputType = {
    id: number
    date: number
    topic_name: number
    _all: number
  }


  export type DebateAvgAggregateInputType = {
    id?: true
  }

  export type DebateSumAggregateInputType = {
    id?: true
  }

  export type DebateMinAggregateInputType = {
    id?: true
    date?: true
    topic_name?: true
  }

  export type DebateMaxAggregateInputType = {
    id?: true
    date?: true
    topic_name?: true
  }

  export type DebateCountAggregateInputType = {
    id?: true
    date?: true
    topic_name?: true
    _all?: true
  }

  export type DebateAggregateArgs = {
    /**
     * Filter which debate to aggregate.
     * 
    **/
    where?: debateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of debates to fetch.
     * 
    **/
    orderBy?: Enumerable<debateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: debateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` debates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` debates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned debates
    **/
    _count?: true | DebateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DebateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DebateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DebateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DebateMaxAggregateInputType
  }

  export type GetDebateAggregateType<T extends DebateAggregateArgs> = {
        [P in keyof T & keyof AggregateDebate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDebate[P]>
      : GetScalarType<T[P], AggregateDebate[P]>
  }




  export type DebateGroupByArgs = {
    where?: debateWhereInput
    orderBy?: Enumerable<debateOrderByWithAggregationInput>
    by: Array<DebateScalarFieldEnum>
    having?: debateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DebateCountAggregateInputType | true
    _avg?: DebateAvgAggregateInputType
    _sum?: DebateSumAggregateInputType
    _min?: DebateMinAggregateInputType
    _max?: DebateMaxAggregateInputType
  }


  export type DebateGroupByOutputType = {
    id: number
    date: Date | null
    topic_name: string | null
    _count: DebateCountAggregateOutputType | null
    _avg: DebateAvgAggregateOutputType | null
    _sum: DebateSumAggregateOutputType | null
    _min: DebateMinAggregateOutputType | null
    _max: DebateMaxAggregateOutputType | null
  }

  type GetDebateGroupByPayload<T extends DebateGroupByArgs> = Promise<
    Array<
      PickArray<DebateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DebateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DebateGroupByOutputType[P]>
            : GetScalarType<T[P], DebateGroupByOutputType[P]>
        }
      >
    >


  export type debateSelect = {
    id?: boolean
    date?: boolean
    topic_name?: boolean
    sides?: boolean | sidesFindManyArgs
    vote?: boolean | voteFindManyArgs
    _count?: boolean | DebateCountOutputTypeArgs
  }

  export type debateInclude = {
    sides?: boolean | sidesFindManyArgs
    vote?: boolean | voteFindManyArgs
    _count?: boolean | DebateCountOutputTypeArgs
  }

  export type debateGetPayload<
    S extends boolean | null | undefined | debateArgs,
    U = keyof S
      > = S extends true
        ? debate
    : S extends undefined
    ? never
    : S extends debateArgs | debateFindManyArgs
    ?'include' extends U
    ? debate  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sides'
        ? Array < sidesGetPayload<S['include'][P]>>  :
        P extends 'vote'
        ? Array < voteGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? DebateCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof debate ?debate [P]
  : 
          P extends 'sides'
        ? Array < sidesGetPayload<S['select'][P]>>  :
        P extends 'vote'
        ? Array < voteGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? DebateCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : debate
  : debate


  type debateCountArgs = Merge<
    Omit<debateFindManyArgs, 'select' | 'include'> & {
      select?: DebateCountAggregateInputType | true
    }
  >

  export interface debateDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Debate that matches the filter.
     * @param {debateFindUniqueArgs} args - Arguments to find a Debate
     * @example
     * // Get one Debate
     * const debate = await prisma.debate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends debateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, debateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'debate'> extends True ? CheckSelect<T, Prisma__debateClient<debate>, Prisma__debateClient<debateGetPayload<T>>> : CheckSelect<T, Prisma__debateClient<debate | null >, Prisma__debateClient<debateGetPayload<T> | null >>

    /**
     * Find the first Debate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {debateFindFirstArgs} args - Arguments to find a Debate
     * @example
     * // Get one Debate
     * const debate = await prisma.debate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends debateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, debateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'debate'> extends True ? CheckSelect<T, Prisma__debateClient<debate>, Prisma__debateClient<debateGetPayload<T>>> : CheckSelect<T, Prisma__debateClient<debate | null >, Prisma__debateClient<debateGetPayload<T> | null >>

    /**
     * Find zero or more Debates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {debateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Debates
     * const debates = await prisma.debate.findMany()
     * 
     * // Get first 10 Debates
     * const debates = await prisma.debate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const debateWithIdOnly = await prisma.debate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends debateFindManyArgs>(
      args?: SelectSubset<T, debateFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<debate>>, PrismaPromise<Array<debateGetPayload<T>>>>

    /**
     * Create a Debate.
     * @param {debateCreateArgs} args - Arguments to create a Debate.
     * @example
     * // Create one Debate
     * const Debate = await prisma.debate.create({
     *   data: {
     *     // ... data to create a Debate
     *   }
     * })
     * 
    **/
    create<T extends debateCreateArgs>(
      args: SelectSubset<T, debateCreateArgs>
    ): CheckSelect<T, Prisma__debateClient<debate>, Prisma__debateClient<debateGetPayload<T>>>

    /**
     * Create many Debates.
     *     @param {debateCreateManyArgs} args - Arguments to create many Debates.
     *     @example
     *     // Create many Debates
     *     const debate = await prisma.debate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends debateCreateManyArgs>(
      args?: SelectSubset<T, debateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Debate.
     * @param {debateDeleteArgs} args - Arguments to delete one Debate.
     * @example
     * // Delete one Debate
     * const Debate = await prisma.debate.delete({
     *   where: {
     *     // ... filter to delete one Debate
     *   }
     * })
     * 
    **/
    delete<T extends debateDeleteArgs>(
      args: SelectSubset<T, debateDeleteArgs>
    ): CheckSelect<T, Prisma__debateClient<debate>, Prisma__debateClient<debateGetPayload<T>>>

    /**
     * Update one Debate.
     * @param {debateUpdateArgs} args - Arguments to update one Debate.
     * @example
     * // Update one Debate
     * const debate = await prisma.debate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends debateUpdateArgs>(
      args: SelectSubset<T, debateUpdateArgs>
    ): CheckSelect<T, Prisma__debateClient<debate>, Prisma__debateClient<debateGetPayload<T>>>

    /**
     * Delete zero or more Debates.
     * @param {debateDeleteManyArgs} args - Arguments to filter Debates to delete.
     * @example
     * // Delete a few Debates
     * const { count } = await prisma.debate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends debateDeleteManyArgs>(
      args?: SelectSubset<T, debateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Debates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {debateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Debates
     * const debate = await prisma.debate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends debateUpdateManyArgs>(
      args: SelectSubset<T, debateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Debate.
     * @param {debateUpsertArgs} args - Arguments to update or create a Debate.
     * @example
     * // Update or create a Debate
     * const debate = await prisma.debate.upsert({
     *   create: {
     *     // ... data to create a Debate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Debate we want to update
     *   }
     * })
    **/
    upsert<T extends debateUpsertArgs>(
      args: SelectSubset<T, debateUpsertArgs>
    ): CheckSelect<T, Prisma__debateClient<debate>, Prisma__debateClient<debateGetPayload<T>>>

    /**
     * Count the number of Debates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {debateCountArgs} args - Arguments to filter Debates to count.
     * @example
     * // Count the number of Debates
     * const count = await prisma.debate.count({
     *   where: {
     *     // ... the filter for the Debates we want to count
     *   }
     * })
    **/
    count<T extends debateCountArgs>(
      args?: Subset<T, debateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DebateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Debate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DebateAggregateArgs>(args: Subset<T, DebateAggregateArgs>): PrismaPromise<GetDebateAggregateType<T>>

    /**
     * Group by Debate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DebateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DebateGroupByArgs['orderBy'] }
        : { orderBy?: DebateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DebateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDebateGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for debate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__debateClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sides<T extends sidesFindManyArgs = {}>(args?: Subset<T, sidesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sides>>, PrismaPromise<Array<sidesGetPayload<T>>>>;

    vote<T extends voteFindManyArgs = {}>(args?: Subset<T, voteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<vote>>, PrismaPromise<Array<voteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * debate findUnique
   */
  export type debateFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the debate
     * 
    **/
    select?: debateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: debateInclude | null
    /**
     * Throw an Error if a debate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which debate to fetch.
     * 
    **/
    where: debateWhereUniqueInput
  }


  /**
   * debate findFirst
   */
  export type debateFindFirstArgs = {
    /**
     * Select specific fields to fetch from the debate
     * 
    **/
    select?: debateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: debateInclude | null
    /**
     * Throw an Error if a debate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which debate to fetch.
     * 
    **/
    where?: debateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of debates to fetch.
     * 
    **/
    orderBy?: Enumerable<debateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for debates.
     * 
    **/
    cursor?: debateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` debates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` debates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of debates.
     * 
    **/
    distinct?: Enumerable<DebateScalarFieldEnum>
  }


  /**
   * debate findMany
   */
  export type debateFindManyArgs = {
    /**
     * Select specific fields to fetch from the debate
     * 
    **/
    select?: debateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: debateInclude | null
    /**
     * Filter, which debates to fetch.
     * 
    **/
    where?: debateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of debates to fetch.
     * 
    **/
    orderBy?: Enumerable<debateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing debates.
     * 
    **/
    cursor?: debateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` debates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` debates.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DebateScalarFieldEnum>
  }


  /**
   * debate create
   */
  export type debateCreateArgs = {
    /**
     * Select specific fields to fetch from the debate
     * 
    **/
    select?: debateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: debateInclude | null
    /**
     * The data needed to create a debate.
     * 
    **/
    data: XOR<debateCreateInput, debateUncheckedCreateInput>
  }


  /**
   * debate createMany
   */
  export type debateCreateManyArgs = {
    data: Enumerable<debateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * debate update
   */
  export type debateUpdateArgs = {
    /**
     * Select specific fields to fetch from the debate
     * 
    **/
    select?: debateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: debateInclude | null
    /**
     * The data needed to update a debate.
     * 
    **/
    data: XOR<debateUpdateInput, debateUncheckedUpdateInput>
    /**
     * Choose, which debate to update.
     * 
    **/
    where: debateWhereUniqueInput
  }


  /**
   * debate updateMany
   */
  export type debateUpdateManyArgs = {
    data: XOR<debateUpdateManyMutationInput, debateUncheckedUpdateManyInput>
    where?: debateWhereInput
  }


  /**
   * debate upsert
   */
  export type debateUpsertArgs = {
    /**
     * Select specific fields to fetch from the debate
     * 
    **/
    select?: debateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: debateInclude | null
    /**
     * The filter to search for the debate to update in case it exists.
     * 
    **/
    where: debateWhereUniqueInput
    /**
     * In case the debate found by the `where` argument doesn't exist, create a new debate with this data.
     * 
    **/
    create: XOR<debateCreateInput, debateUncheckedCreateInput>
    /**
     * In case the debate was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<debateUpdateInput, debateUncheckedUpdateInput>
  }


  /**
   * debate delete
   */
  export type debateDeleteArgs = {
    /**
     * Select specific fields to fetch from the debate
     * 
    **/
    select?: debateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: debateInclude | null
    /**
     * Filter which debate to delete.
     * 
    **/
    where: debateWhereUniqueInput
  }


  /**
   * debate deleteMany
   */
  export type debateDeleteManyArgs = {
    where?: debateWhereInput
  }


  /**
   * debate without action
   */
  export type debateArgs = {
    /**
     * Select specific fields to fetch from the debate
     * 
    **/
    select?: debateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: debateInclude | null
  }



  /**
   * Model sides
   */


  export type AggregateSides = {
    _count: SidesCountAggregateOutputType | null
    _avg: SidesAvgAggregateOutputType | null
    _sum: SidesSumAggregateOutputType | null
    _min: SidesMinAggregateOutputType | null
    _max: SidesMaxAggregateOutputType | null
  }

  export type SidesAvgAggregateOutputType = {
    id: number | null
    topic_id: number | null
    debate_id: number | null
  }

  export type SidesSumAggregateOutputType = {
    id: number | null
    topic_id: number | null
    debate_id: number | null
  }

  export type SidesMinAggregateOutputType = {
    id: number | null
    topic_id: number | null
    owner_id: string | null
    debate_id: number | null
    side: side | null
  }

  export type SidesMaxAggregateOutputType = {
    id: number | null
    topic_id: number | null
    owner_id: string | null
    debate_id: number | null
    side: side | null
  }

  export type SidesCountAggregateOutputType = {
    id: number
    topic_id: number
    owner_id: number
    debate_id: number
    side: number
    _all: number
  }


  export type SidesAvgAggregateInputType = {
    id?: true
    topic_id?: true
    debate_id?: true
  }

  export type SidesSumAggregateInputType = {
    id?: true
    topic_id?: true
    debate_id?: true
  }

  export type SidesMinAggregateInputType = {
    id?: true
    topic_id?: true
    owner_id?: true
    debate_id?: true
    side?: true
  }

  export type SidesMaxAggregateInputType = {
    id?: true
    topic_id?: true
    owner_id?: true
    debate_id?: true
    side?: true
  }

  export type SidesCountAggregateInputType = {
    id?: true
    topic_id?: true
    owner_id?: true
    debate_id?: true
    side?: true
    _all?: true
  }

  export type SidesAggregateArgs = {
    /**
     * Filter which sides to aggregate.
     * 
    **/
    where?: sidesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sides to fetch.
     * 
    **/
    orderBy?: Enumerable<sidesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: sidesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sides from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sides.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sides
    **/
    _count?: true | SidesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SidesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SidesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SidesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SidesMaxAggregateInputType
  }

  export type GetSidesAggregateType<T extends SidesAggregateArgs> = {
        [P in keyof T & keyof AggregateSides]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSides[P]>
      : GetScalarType<T[P], AggregateSides[P]>
  }




  export type SidesGroupByArgs = {
    where?: sidesWhereInput
    orderBy?: Enumerable<sidesOrderByWithAggregationInput>
    by: Array<SidesScalarFieldEnum>
    having?: sidesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SidesCountAggregateInputType | true
    _avg?: SidesAvgAggregateInputType
    _sum?: SidesSumAggregateInputType
    _min?: SidesMinAggregateInputType
    _max?: SidesMaxAggregateInputType
  }


  export type SidesGroupByOutputType = {
    id: number
    topic_id: number | null
    owner_id: string | null
    debate_id: number
    side: side | null
    _count: SidesCountAggregateOutputType | null
    _avg: SidesAvgAggregateOutputType | null
    _sum: SidesSumAggregateOutputType | null
    _min: SidesMinAggregateOutputType | null
    _max: SidesMaxAggregateOutputType | null
  }

  type GetSidesGroupByPayload<T extends SidesGroupByArgs> = Promise<
    Array<
      PickArray<SidesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SidesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SidesGroupByOutputType[P]>
            : GetScalarType<T[P], SidesGroupByOutputType[P]>
        }
      >
    >


  export type sidesSelect = {
    id?: boolean
    topic_id?: boolean
    owner_id?: boolean
    debate_id?: boolean
    side?: boolean
    debate?: boolean | debateArgs
    topic?: boolean | topicArgs
  }

  export type sidesInclude = {
    debate?: boolean | debateArgs
    topic?: boolean | topicArgs
  }

  export type sidesGetPayload<
    S extends boolean | null | undefined | sidesArgs,
    U = keyof S
      > = S extends true
        ? sides
    : S extends undefined
    ? never
    : S extends sidesArgs | sidesFindManyArgs
    ?'include' extends U
    ? sides  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'debate'
        ? debateGetPayload<S['include'][P]> :
        P extends 'topic'
        ? topicGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof sides ?sides [P]
  : 
          P extends 'debate'
        ? debateGetPayload<S['select'][P]> :
        P extends 'topic'
        ? topicGetPayload<S['select'][P]> | null : never
  } 
    : sides
  : sides


  type sidesCountArgs = Merge<
    Omit<sidesFindManyArgs, 'select' | 'include'> & {
      select?: SidesCountAggregateInputType | true
    }
  >

  export interface sidesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sides that matches the filter.
     * @param {sidesFindUniqueArgs} args - Arguments to find a Sides
     * @example
     * // Get one Sides
     * const sides = await prisma.sides.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sidesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sidesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sides'> extends True ? CheckSelect<T, Prisma__sidesClient<sides>, Prisma__sidesClient<sidesGetPayload<T>>> : CheckSelect<T, Prisma__sidesClient<sides | null >, Prisma__sidesClient<sidesGetPayload<T> | null >>

    /**
     * Find the first Sides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sidesFindFirstArgs} args - Arguments to find a Sides
     * @example
     * // Get one Sides
     * const sides = await prisma.sides.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sidesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sidesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sides'> extends True ? CheckSelect<T, Prisma__sidesClient<sides>, Prisma__sidesClient<sidesGetPayload<T>>> : CheckSelect<T, Prisma__sidesClient<sides | null >, Prisma__sidesClient<sidesGetPayload<T> | null >>

    /**
     * Find zero or more Sides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sidesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sides
     * const sides = await prisma.sides.findMany()
     * 
     * // Get first 10 Sides
     * const sides = await prisma.sides.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sidesWithIdOnly = await prisma.sides.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sidesFindManyArgs>(
      args?: SelectSubset<T, sidesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<sides>>, PrismaPromise<Array<sidesGetPayload<T>>>>

    /**
     * Create a Sides.
     * @param {sidesCreateArgs} args - Arguments to create a Sides.
     * @example
     * // Create one Sides
     * const Sides = await prisma.sides.create({
     *   data: {
     *     // ... data to create a Sides
     *   }
     * })
     * 
    **/
    create<T extends sidesCreateArgs>(
      args: SelectSubset<T, sidesCreateArgs>
    ): CheckSelect<T, Prisma__sidesClient<sides>, Prisma__sidesClient<sidesGetPayload<T>>>

    /**
     * Create many Sides.
     *     @param {sidesCreateManyArgs} args - Arguments to create many Sides.
     *     @example
     *     // Create many Sides
     *     const sides = await prisma.sides.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sidesCreateManyArgs>(
      args?: SelectSubset<T, sidesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sides.
     * @param {sidesDeleteArgs} args - Arguments to delete one Sides.
     * @example
     * // Delete one Sides
     * const Sides = await prisma.sides.delete({
     *   where: {
     *     // ... filter to delete one Sides
     *   }
     * })
     * 
    **/
    delete<T extends sidesDeleteArgs>(
      args: SelectSubset<T, sidesDeleteArgs>
    ): CheckSelect<T, Prisma__sidesClient<sides>, Prisma__sidesClient<sidesGetPayload<T>>>

    /**
     * Update one Sides.
     * @param {sidesUpdateArgs} args - Arguments to update one Sides.
     * @example
     * // Update one Sides
     * const sides = await prisma.sides.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sidesUpdateArgs>(
      args: SelectSubset<T, sidesUpdateArgs>
    ): CheckSelect<T, Prisma__sidesClient<sides>, Prisma__sidesClient<sidesGetPayload<T>>>

    /**
     * Delete zero or more Sides.
     * @param {sidesDeleteManyArgs} args - Arguments to filter Sides to delete.
     * @example
     * // Delete a few Sides
     * const { count } = await prisma.sides.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sidesDeleteManyArgs>(
      args?: SelectSubset<T, sidesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sidesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sides
     * const sides = await prisma.sides.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sidesUpdateManyArgs>(
      args: SelectSubset<T, sidesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sides.
     * @param {sidesUpsertArgs} args - Arguments to update or create a Sides.
     * @example
     * // Update or create a Sides
     * const sides = await prisma.sides.upsert({
     *   create: {
     *     // ... data to create a Sides
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sides we want to update
     *   }
     * })
    **/
    upsert<T extends sidesUpsertArgs>(
      args: SelectSubset<T, sidesUpsertArgs>
    ): CheckSelect<T, Prisma__sidesClient<sides>, Prisma__sidesClient<sidesGetPayload<T>>>

    /**
     * Count the number of Sides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sidesCountArgs} args - Arguments to filter Sides to count.
     * @example
     * // Count the number of Sides
     * const count = await prisma.sides.count({
     *   where: {
     *     // ... the filter for the Sides we want to count
     *   }
     * })
    **/
    count<T extends sidesCountArgs>(
      args?: Subset<T, sidesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SidesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SidesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SidesAggregateArgs>(args: Subset<T, SidesAggregateArgs>): PrismaPromise<GetSidesAggregateType<T>>

    /**
     * Group by Sides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SidesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SidesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SidesGroupByArgs['orderBy'] }
        : { orderBy?: SidesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SidesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSidesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for sides.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sidesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    debate<T extends debateArgs = {}>(args?: Subset<T, debateArgs>): CheckSelect<T, Prisma__debateClient<debate | null >, Prisma__debateClient<debateGetPayload<T> | null >>;

    topic<T extends topicArgs = {}>(args?: Subset<T, topicArgs>): CheckSelect<T, Prisma__topicClient<topic | null >, Prisma__topicClient<topicGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * sides findUnique
   */
  export type sidesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the sides
     * 
    **/
    select?: sidesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sidesInclude | null
    /**
     * Throw an Error if a sides can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sides to fetch.
     * 
    **/
    where: sidesWhereUniqueInput
  }


  /**
   * sides findFirst
   */
  export type sidesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the sides
     * 
    **/
    select?: sidesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sidesInclude | null
    /**
     * Throw an Error if a sides can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sides to fetch.
     * 
    **/
    where?: sidesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sides to fetch.
     * 
    **/
    orderBy?: Enumerable<sidesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sides.
     * 
    **/
    cursor?: sidesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sides from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sides.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sides.
     * 
    **/
    distinct?: Enumerable<SidesScalarFieldEnum>
  }


  /**
   * sides findMany
   */
  export type sidesFindManyArgs = {
    /**
     * Select specific fields to fetch from the sides
     * 
    **/
    select?: sidesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sidesInclude | null
    /**
     * Filter, which sides to fetch.
     * 
    **/
    where?: sidesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sides to fetch.
     * 
    **/
    orderBy?: Enumerable<sidesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sides.
     * 
    **/
    cursor?: sidesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sides from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sides.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SidesScalarFieldEnum>
  }


  /**
   * sides create
   */
  export type sidesCreateArgs = {
    /**
     * Select specific fields to fetch from the sides
     * 
    **/
    select?: sidesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sidesInclude | null
    /**
     * The data needed to create a sides.
     * 
    **/
    data: XOR<sidesCreateInput, sidesUncheckedCreateInput>
  }


  /**
   * sides createMany
   */
  export type sidesCreateManyArgs = {
    data: Enumerable<sidesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sides update
   */
  export type sidesUpdateArgs = {
    /**
     * Select specific fields to fetch from the sides
     * 
    **/
    select?: sidesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sidesInclude | null
    /**
     * The data needed to update a sides.
     * 
    **/
    data: XOR<sidesUpdateInput, sidesUncheckedUpdateInput>
    /**
     * Choose, which sides to update.
     * 
    **/
    where: sidesWhereUniqueInput
  }


  /**
   * sides updateMany
   */
  export type sidesUpdateManyArgs = {
    data: XOR<sidesUpdateManyMutationInput, sidesUncheckedUpdateManyInput>
    where?: sidesWhereInput
  }


  /**
   * sides upsert
   */
  export type sidesUpsertArgs = {
    /**
     * Select specific fields to fetch from the sides
     * 
    **/
    select?: sidesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sidesInclude | null
    /**
     * The filter to search for the sides to update in case it exists.
     * 
    **/
    where: sidesWhereUniqueInput
    /**
     * In case the sides found by the `where` argument doesn't exist, create a new sides with this data.
     * 
    **/
    create: XOR<sidesCreateInput, sidesUncheckedCreateInput>
    /**
     * In case the sides was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<sidesUpdateInput, sidesUncheckedUpdateInput>
  }


  /**
   * sides delete
   */
  export type sidesDeleteArgs = {
    /**
     * Select specific fields to fetch from the sides
     * 
    **/
    select?: sidesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sidesInclude | null
    /**
     * Filter which sides to delete.
     * 
    **/
    where: sidesWhereUniqueInput
  }


  /**
   * sides deleteMany
   */
  export type sidesDeleteManyArgs = {
    where?: sidesWhereInput
  }


  /**
   * sides without action
   */
  export type sidesArgs = {
    /**
     * Select specific fields to fetch from the sides
     * 
    **/
    select?: sidesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sidesInclude | null
  }



  /**
   * Model topic
   */


  export type AggregateTopic = {
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  export type TopicAvgAggregateOutputType = {
    id: number | null
  }

  export type TopicSumAggregateOutputType = {
    id: number | null
  }

  export type TopicMinAggregateOutputType = {
    id: number | null
    name: string | null
    owner_id: string | null
  }

  export type TopicMaxAggregateOutputType = {
    id: number | null
    name: string | null
    owner_id: string | null
  }

  export type TopicCountAggregateOutputType = {
    id: number
    name: number
    owner_id: number
    _all: number
  }


  export type TopicAvgAggregateInputType = {
    id?: true
  }

  export type TopicSumAggregateInputType = {
    id?: true
  }

  export type TopicMinAggregateInputType = {
    id?: true
    name?: true
    owner_id?: true
  }

  export type TopicMaxAggregateInputType = {
    id?: true
    name?: true
    owner_id?: true
  }

  export type TopicCountAggregateInputType = {
    id?: true
    name?: true
    owner_id?: true
    _all?: true
  }

  export type TopicAggregateArgs = {
    /**
     * Filter which topic to aggregate.
     * 
    **/
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     * 
    **/
    orderBy?: Enumerable<topicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned topics
    **/
    _count?: true | TopicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TopicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TopicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopicMaxAggregateInputType
  }

  export type GetTopicAggregateType<T extends TopicAggregateArgs> = {
        [P in keyof T & keyof AggregateTopic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopic[P]>
      : GetScalarType<T[P], AggregateTopic[P]>
  }




  export type TopicGroupByArgs = {
    where?: topicWhereInput
    orderBy?: Enumerable<topicOrderByWithAggregationInput>
    by: Array<TopicScalarFieldEnum>
    having?: topicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopicCountAggregateInputType | true
    _avg?: TopicAvgAggregateInputType
    _sum?: TopicSumAggregateInputType
    _min?: TopicMinAggregateInputType
    _max?: TopicMaxAggregateInputType
  }


  export type TopicGroupByOutputType = {
    id: number
    name: string | null
    owner_id: string | null
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  type GetTopicGroupByPayload<T extends TopicGroupByArgs> = Promise<
    Array<
      PickArray<TopicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopicGroupByOutputType[P]>
            : GetScalarType<T[P], TopicGroupByOutputType[P]>
        }
      >
    >


  export type topicSelect = {
    id?: boolean
    name?: boolean
    owner_id?: boolean
    sides?: boolean | sidesFindManyArgs
    vote?: boolean | voteFindManyArgs
    _count?: boolean | TopicCountOutputTypeArgs
  }

  export type topicInclude = {
    sides?: boolean | sidesFindManyArgs
    vote?: boolean | voteFindManyArgs
    _count?: boolean | TopicCountOutputTypeArgs
  }

  export type topicGetPayload<
    S extends boolean | null | undefined | topicArgs,
    U = keyof S
      > = S extends true
        ? topic
    : S extends undefined
    ? never
    : S extends topicArgs | topicFindManyArgs
    ?'include' extends U
    ? topic  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sides'
        ? Array < sidesGetPayload<S['include'][P]>>  :
        P extends 'vote'
        ? Array < voteGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? TopicCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof topic ?topic [P]
  : 
          P extends 'sides'
        ? Array < sidesGetPayload<S['select'][P]>>  :
        P extends 'vote'
        ? Array < voteGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? TopicCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : topic
  : topic


  type topicCountArgs = Merge<
    Omit<topicFindManyArgs, 'select' | 'include'> & {
      select?: TopicCountAggregateInputType | true
    }
  >

  export interface topicDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Topic that matches the filter.
     * @param {topicFindUniqueArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends topicFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, topicFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'topic'> extends True ? CheckSelect<T, Prisma__topicClient<topic>, Prisma__topicClient<topicGetPayload<T>>> : CheckSelect<T, Prisma__topicClient<topic | null >, Prisma__topicClient<topicGetPayload<T> | null >>

    /**
     * Find the first Topic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicFindFirstArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends topicFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, topicFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'topic'> extends True ? CheckSelect<T, Prisma__topicClient<topic>, Prisma__topicClient<topicGetPayload<T>>> : CheckSelect<T, Prisma__topicClient<topic | null >, Prisma__topicClient<topicGetPayload<T> | null >>

    /**
     * Find zero or more Topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Topics
     * const topics = await prisma.topic.findMany()
     * 
     * // Get first 10 Topics
     * const topics = await prisma.topic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topicWithIdOnly = await prisma.topic.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends topicFindManyArgs>(
      args?: SelectSubset<T, topicFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<topic>>, PrismaPromise<Array<topicGetPayload<T>>>>

    /**
     * Create a Topic.
     * @param {topicCreateArgs} args - Arguments to create a Topic.
     * @example
     * // Create one Topic
     * const Topic = await prisma.topic.create({
     *   data: {
     *     // ... data to create a Topic
     *   }
     * })
     * 
    **/
    create<T extends topicCreateArgs>(
      args: SelectSubset<T, topicCreateArgs>
    ): CheckSelect<T, Prisma__topicClient<topic>, Prisma__topicClient<topicGetPayload<T>>>

    /**
     * Create many Topics.
     *     @param {topicCreateManyArgs} args - Arguments to create many Topics.
     *     @example
     *     // Create many Topics
     *     const topic = await prisma.topic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends topicCreateManyArgs>(
      args?: SelectSubset<T, topicCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Topic.
     * @param {topicDeleteArgs} args - Arguments to delete one Topic.
     * @example
     * // Delete one Topic
     * const Topic = await prisma.topic.delete({
     *   where: {
     *     // ... filter to delete one Topic
     *   }
     * })
     * 
    **/
    delete<T extends topicDeleteArgs>(
      args: SelectSubset<T, topicDeleteArgs>
    ): CheckSelect<T, Prisma__topicClient<topic>, Prisma__topicClient<topicGetPayload<T>>>

    /**
     * Update one Topic.
     * @param {topicUpdateArgs} args - Arguments to update one Topic.
     * @example
     * // Update one Topic
     * const topic = await prisma.topic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends topicUpdateArgs>(
      args: SelectSubset<T, topicUpdateArgs>
    ): CheckSelect<T, Prisma__topicClient<topic>, Prisma__topicClient<topicGetPayload<T>>>

    /**
     * Delete zero or more Topics.
     * @param {topicDeleteManyArgs} args - Arguments to filter Topics to delete.
     * @example
     * // Delete a few Topics
     * const { count } = await prisma.topic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends topicDeleteManyArgs>(
      args?: SelectSubset<T, topicDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Topics
     * const topic = await prisma.topic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends topicUpdateManyArgs>(
      args: SelectSubset<T, topicUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Topic.
     * @param {topicUpsertArgs} args - Arguments to update or create a Topic.
     * @example
     * // Update or create a Topic
     * const topic = await prisma.topic.upsert({
     *   create: {
     *     // ... data to create a Topic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Topic we want to update
     *   }
     * })
    **/
    upsert<T extends topicUpsertArgs>(
      args: SelectSubset<T, topicUpsertArgs>
    ): CheckSelect<T, Prisma__topicClient<topic>, Prisma__topicClient<topicGetPayload<T>>>

    /**
     * Count the number of Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicCountArgs} args - Arguments to filter Topics to count.
     * @example
     * // Count the number of Topics
     * const count = await prisma.topic.count({
     *   where: {
     *     // ... the filter for the Topics we want to count
     *   }
     * })
    **/
    count<T extends topicCountArgs>(
      args?: Subset<T, topicCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopicAggregateArgs>(args: Subset<T, TopicAggregateArgs>): PrismaPromise<GetTopicAggregateType<T>>

    /**
     * Group by Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopicGroupByArgs['orderBy'] }
        : { orderBy?: TopicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for topic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__topicClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sides<T extends sidesFindManyArgs = {}>(args?: Subset<T, sidesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sides>>, PrismaPromise<Array<sidesGetPayload<T>>>>;

    vote<T extends voteFindManyArgs = {}>(args?: Subset<T, voteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<vote>>, PrismaPromise<Array<voteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * topic findUnique
   */
  export type topicFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the topic
     * 
    **/
    select?: topicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicInclude | null
    /**
     * Throw an Error if a topic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which topic to fetch.
     * 
    **/
    where: topicWhereUniqueInput
  }


  /**
   * topic findFirst
   */
  export type topicFindFirstArgs = {
    /**
     * Select specific fields to fetch from the topic
     * 
    **/
    select?: topicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicInclude | null
    /**
     * Throw an Error if a topic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which topic to fetch.
     * 
    **/
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     * 
    **/
    orderBy?: Enumerable<topicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for topics.
     * 
    **/
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of topics.
     * 
    **/
    distinct?: Enumerable<TopicScalarFieldEnum>
  }


  /**
   * topic findMany
   */
  export type topicFindManyArgs = {
    /**
     * Select specific fields to fetch from the topic
     * 
    **/
    select?: topicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicInclude | null
    /**
     * Filter, which topics to fetch.
     * 
    **/
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     * 
    **/
    orderBy?: Enumerable<topicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing topics.
     * 
    **/
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TopicScalarFieldEnum>
  }


  /**
   * topic create
   */
  export type topicCreateArgs = {
    /**
     * Select specific fields to fetch from the topic
     * 
    **/
    select?: topicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicInclude | null
    /**
     * The data needed to create a topic.
     * 
    **/
    data: XOR<topicCreateInput, topicUncheckedCreateInput>
  }


  /**
   * topic createMany
   */
  export type topicCreateManyArgs = {
    data: Enumerable<topicCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * topic update
   */
  export type topicUpdateArgs = {
    /**
     * Select specific fields to fetch from the topic
     * 
    **/
    select?: topicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicInclude | null
    /**
     * The data needed to update a topic.
     * 
    **/
    data: XOR<topicUpdateInput, topicUncheckedUpdateInput>
    /**
     * Choose, which topic to update.
     * 
    **/
    where: topicWhereUniqueInput
  }


  /**
   * topic updateMany
   */
  export type topicUpdateManyArgs = {
    data: XOR<topicUpdateManyMutationInput, topicUncheckedUpdateManyInput>
    where?: topicWhereInput
  }


  /**
   * topic upsert
   */
  export type topicUpsertArgs = {
    /**
     * Select specific fields to fetch from the topic
     * 
    **/
    select?: topicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicInclude | null
    /**
     * The filter to search for the topic to update in case it exists.
     * 
    **/
    where: topicWhereUniqueInput
    /**
     * In case the topic found by the `where` argument doesn't exist, create a new topic with this data.
     * 
    **/
    create: XOR<topicCreateInput, topicUncheckedCreateInput>
    /**
     * In case the topic was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<topicUpdateInput, topicUncheckedUpdateInput>
  }


  /**
   * topic delete
   */
  export type topicDeleteArgs = {
    /**
     * Select specific fields to fetch from the topic
     * 
    **/
    select?: topicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicInclude | null
    /**
     * Filter which topic to delete.
     * 
    **/
    where: topicWhereUniqueInput
  }


  /**
   * topic deleteMany
   */
  export type topicDeleteManyArgs = {
    where?: topicWhereInput
  }


  /**
   * topic without action
   */
  export type topicArgs = {
    /**
     * Select specific fields to fetch from the topic
     * 
    **/
    select?: topicSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicInclude | null
  }



  /**
   * Model vote
   */


  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  export type VoteAvgAggregateOutputType = {
    id: number | null
    topic_id: number | null
    debate_id: number | null
  }

  export type VoteSumAggregateOutputType = {
    id: number | null
    topic_id: number | null
    debate_id: number | null
  }

  export type VoteMinAggregateOutputType = {
    id: number | null
    topic_id: number | null
    owner_id: string | null
    debate_id: number | null
  }

  export type VoteMaxAggregateOutputType = {
    id: number | null
    topic_id: number | null
    owner_id: string | null
    debate_id: number | null
  }

  export type VoteCountAggregateOutputType = {
    id: number
    topic_id: number
    owner_id: number
    debate_id: number
    _all: number
  }


  export type VoteAvgAggregateInputType = {
    id?: true
    topic_id?: true
    debate_id?: true
  }

  export type VoteSumAggregateInputType = {
    id?: true
    topic_id?: true
    debate_id?: true
  }

  export type VoteMinAggregateInputType = {
    id?: true
    topic_id?: true
    owner_id?: true
    debate_id?: true
  }

  export type VoteMaxAggregateInputType = {
    id?: true
    topic_id?: true
    owner_id?: true
    debate_id?: true
  }

  export type VoteCountAggregateInputType = {
    id?: true
    topic_id?: true
    owner_id?: true
    debate_id?: true
    _all?: true
  }

  export type VoteAggregateArgs = {
    /**
     * Filter which vote to aggregate.
     * 
    **/
    where?: voteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votes to fetch.
     * 
    **/
    orderBy?: Enumerable<voteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: voteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }




  export type VoteGroupByArgs = {
    where?: voteWhereInput
    orderBy?: Enumerable<voteOrderByWithAggregationInput>
    by: Array<VoteScalarFieldEnum>
    having?: voteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _avg?: VoteAvgAggregateInputType
    _sum?: VoteSumAggregateInputType
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }


  export type VoteGroupByOutputType = {
    id: number
    topic_id: number | null
    owner_id: string | null
    debate_id: number
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = Promise<
    Array<
      PickArray<VoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteGroupByOutputType[P]>
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      >
    >


  export type voteSelect = {
    id?: boolean
    topic_id?: boolean
    owner_id?: boolean
    debate_id?: boolean
    debate?: boolean | debateArgs
    topic?: boolean | topicArgs
  }

  export type voteInclude = {
    debate?: boolean | debateArgs
    topic?: boolean | topicArgs
  }

  export type voteGetPayload<
    S extends boolean | null | undefined | voteArgs,
    U = keyof S
      > = S extends true
        ? vote
    : S extends undefined
    ? never
    : S extends voteArgs | voteFindManyArgs
    ?'include' extends U
    ? vote  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'debate'
        ? debateGetPayload<S['include'][P]> :
        P extends 'topic'
        ? topicGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof vote ?vote [P]
  : 
          P extends 'debate'
        ? debateGetPayload<S['select'][P]> :
        P extends 'topic'
        ? topicGetPayload<S['select'][P]> | null : never
  } 
    : vote
  : vote


  type voteCountArgs = Merge<
    Omit<voteFindManyArgs, 'select' | 'include'> & {
      select?: VoteCountAggregateInputType | true
    }
  >

  export interface voteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Vote that matches the filter.
     * @param {voteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends voteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, voteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'vote'> extends True ? CheckSelect<T, Prisma__voteClient<vote>, Prisma__voteClient<voteGetPayload<T>>> : CheckSelect<T, Prisma__voteClient<vote | null >, Prisma__voteClient<voteGetPayload<T> | null >>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends voteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, voteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'vote'> extends True ? CheckSelect<T, Prisma__voteClient<vote>, Prisma__voteClient<voteGetPayload<T>>> : CheckSelect<T, Prisma__voteClient<vote | null >, Prisma__voteClient<voteGetPayload<T> | null >>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends voteFindManyArgs>(
      args?: SelectSubset<T, voteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<vote>>, PrismaPromise<Array<voteGetPayload<T>>>>

    /**
     * Create a Vote.
     * @param {voteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
    **/
    create<T extends voteCreateArgs>(
      args: SelectSubset<T, voteCreateArgs>
    ): CheckSelect<T, Prisma__voteClient<vote>, Prisma__voteClient<voteGetPayload<T>>>

    /**
     * Create many Votes.
     *     @param {voteCreateManyArgs} args - Arguments to create many Votes.
     *     @example
     *     // Create many Votes
     *     const vote = await prisma.vote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends voteCreateManyArgs>(
      args?: SelectSubset<T, voteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vote.
     * @param {voteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
    **/
    delete<T extends voteDeleteArgs>(
      args: SelectSubset<T, voteDeleteArgs>
    ): CheckSelect<T, Prisma__voteClient<vote>, Prisma__voteClient<voteGetPayload<T>>>

    /**
     * Update one Vote.
     * @param {voteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends voteUpdateArgs>(
      args: SelectSubset<T, voteUpdateArgs>
    ): CheckSelect<T, Prisma__voteClient<vote>, Prisma__voteClient<voteGetPayload<T>>>

    /**
     * Delete zero or more Votes.
     * @param {voteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends voteDeleteManyArgs>(
      args?: SelectSubset<T, voteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends voteUpdateManyArgs>(
      args: SelectSubset<T, voteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vote.
     * @param {voteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
    **/
    upsert<T extends voteUpsertArgs>(
      args: SelectSubset<T, voteUpsertArgs>
    ): CheckSelect<T, Prisma__voteClient<vote>, Prisma__voteClient<voteGetPayload<T>>>

    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends voteCountArgs>(
      args?: Subset<T, voteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__voteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    debate<T extends debateArgs = {}>(args?: Subset<T, debateArgs>): CheckSelect<T, Prisma__debateClient<debate | null >, Prisma__debateClient<debateGetPayload<T> | null >>;

    topic<T extends topicArgs = {}>(args?: Subset<T, topicArgs>): CheckSelect<T, Prisma__topicClient<topic | null >, Prisma__topicClient<topicGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * vote findUnique
   */
  export type voteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the vote
     * 
    **/
    select?: voteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: voteInclude | null
    /**
     * Throw an Error if a vote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which vote to fetch.
     * 
    **/
    where: voteWhereUniqueInput
  }


  /**
   * vote findFirst
   */
  export type voteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the vote
     * 
    **/
    select?: voteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: voteInclude | null
    /**
     * Throw an Error if a vote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which vote to fetch.
     * 
    **/
    where?: voteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votes to fetch.
     * 
    **/
    orderBy?: Enumerable<voteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for votes.
     * 
    **/
    cursor?: voteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of votes.
     * 
    **/
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * vote findMany
   */
  export type voteFindManyArgs = {
    /**
     * Select specific fields to fetch from the vote
     * 
    **/
    select?: voteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: voteInclude | null
    /**
     * Filter, which votes to fetch.
     * 
    **/
    where?: voteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votes to fetch.
     * 
    **/
    orderBy?: Enumerable<voteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing votes.
     * 
    **/
    cursor?: voteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * vote create
   */
  export type voteCreateArgs = {
    /**
     * Select specific fields to fetch from the vote
     * 
    **/
    select?: voteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: voteInclude | null
    /**
     * The data needed to create a vote.
     * 
    **/
    data: XOR<voteCreateInput, voteUncheckedCreateInput>
  }


  /**
   * vote createMany
   */
  export type voteCreateManyArgs = {
    data: Enumerable<voteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * vote update
   */
  export type voteUpdateArgs = {
    /**
     * Select specific fields to fetch from the vote
     * 
    **/
    select?: voteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: voteInclude | null
    /**
     * The data needed to update a vote.
     * 
    **/
    data: XOR<voteUpdateInput, voteUncheckedUpdateInput>
    /**
     * Choose, which vote to update.
     * 
    **/
    where: voteWhereUniqueInput
  }


  /**
   * vote updateMany
   */
  export type voteUpdateManyArgs = {
    data: XOR<voteUpdateManyMutationInput, voteUncheckedUpdateManyInput>
    where?: voteWhereInput
  }


  /**
   * vote upsert
   */
  export type voteUpsertArgs = {
    /**
     * Select specific fields to fetch from the vote
     * 
    **/
    select?: voteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: voteInclude | null
    /**
     * The filter to search for the vote to update in case it exists.
     * 
    **/
    where: voteWhereUniqueInput
    /**
     * In case the vote found by the `where` argument doesn't exist, create a new vote with this data.
     * 
    **/
    create: XOR<voteCreateInput, voteUncheckedCreateInput>
    /**
     * In case the vote was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<voteUpdateInput, voteUncheckedUpdateInput>
  }


  /**
   * vote delete
   */
  export type voteDeleteArgs = {
    /**
     * Select specific fields to fetch from the vote
     * 
    **/
    select?: voteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: voteInclude | null
    /**
     * Filter which vote to delete.
     * 
    **/
    where: voteWhereUniqueInput
  }


  /**
   * vote deleteMany
   */
  export type voteDeleteManyArgs = {
    where?: voteWhereInput
  }


  /**
   * vote without action
   */
  export type voteArgs = {
    /**
     * Select specific fields to fetch from the vote
     * 
    **/
    select?: voteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: voteInclude | null
  }



  /**
   * Model account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    oauth_token_secret: string | null
    oauth_token: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    oauth_token_secret: string | null
    oauth_token: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    oauth_token_secret: number
    oauth_token: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    oauth_token_secret?: true
    oauth_token?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    oauth_token_secret?: true
    oauth_token?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    oauth_token_secret?: true
    oauth_token?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which account to aggregate.
     * 
    **/
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: accountWhereInput
    orderBy?: Enumerable<accountOrderByWithAggregationInput>
    by: Array<AccountScalarFieldEnum>
    having?: accountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    oauth_token_secret: string | null
    oauth_token: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Promise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type accountSelect = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    oauth_token_secret?: boolean
    oauth_token?: boolean
    user?: boolean | usersArgs
  }

  export type accountInclude = {
    user?: boolean | usersArgs
  }

  export type accountGetPayload<
    S extends boolean | null | undefined | accountArgs,
    U = keyof S
      > = S extends true
        ? account
    : S extends undefined
    ? never
    : S extends accountArgs | accountFindManyArgs
    ?'include' extends U
    ? account  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof account ?account [P]
  : 
          P extends 'user'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : account
  : account


  type accountCountArgs = Merge<
    Omit<accountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }
  >

  export interface accountDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Account that matches the filter.
     * @param {accountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends accountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, accountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'account'> extends True ? CheckSelect<T, Prisma__accountClient<account>, Prisma__accountClient<accountGetPayload<T>>> : CheckSelect<T, Prisma__accountClient<account | null >, Prisma__accountClient<accountGetPayload<T> | null >>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends accountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, accountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'account'> extends True ? CheckSelect<T, Prisma__accountClient<account>, Prisma__accountClient<accountGetPayload<T>>> : CheckSelect<T, Prisma__accountClient<account | null >, Prisma__accountClient<accountGetPayload<T> | null >>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends accountFindManyArgs>(
      args?: SelectSubset<T, accountFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<account>>, PrismaPromise<Array<accountGetPayload<T>>>>

    /**
     * Create a Account.
     * @param {accountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends accountCreateArgs>(
      args: SelectSubset<T, accountCreateArgs>
    ): CheckSelect<T, Prisma__accountClient<account>, Prisma__accountClient<accountGetPayload<T>>>

    /**
     * Create many Accounts.
     *     @param {accountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends accountCreateManyArgs>(
      args?: SelectSubset<T, accountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {accountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends accountDeleteArgs>(
      args: SelectSubset<T, accountDeleteArgs>
    ): CheckSelect<T, Prisma__accountClient<account>, Prisma__accountClient<accountGetPayload<T>>>

    /**
     * Update one Account.
     * @param {accountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends accountUpdateArgs>(
      args: SelectSubset<T, accountUpdateArgs>
    ): CheckSelect<T, Prisma__accountClient<account>, Prisma__accountClient<accountGetPayload<T>>>

    /**
     * Delete zero or more Accounts.
     * @param {accountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends accountDeleteManyArgs>(
      args?: SelectSubset<T, accountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends accountUpdateManyArgs>(
      args: SelectSubset<T, accountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {accountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends accountUpsertArgs>(
      args: SelectSubset<T, accountUpsertArgs>
    ): CheckSelect<T, Prisma__accountClient<account>, Prisma__accountClient<accountGetPayload<T>>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends accountCountArgs>(
      args?: Subset<T, accountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__accountClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * account findUnique
   */
  export type accountFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the account
     * 
    **/
    select?: accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: accountInclude | null
    /**
     * Throw an Error if a account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which account to fetch.
     * 
    **/
    where: accountWhereUniqueInput
  }


  /**
   * account findFirst
   */
  export type accountFindFirstArgs = {
    /**
     * Select specific fields to fetch from the account
     * 
    **/
    select?: accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: accountInclude | null
    /**
     * Throw an Error if a account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which account to fetch.
     * 
    **/
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for accounts.
     * 
    **/
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of accounts.
     * 
    **/
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * account findMany
   */
  export type accountFindManyArgs = {
    /**
     * Select specific fields to fetch from the account
     * 
    **/
    select?: accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: accountInclude | null
    /**
     * Filter, which accounts to fetch.
     * 
    **/
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing accounts.
     * 
    **/
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * account create
   */
  export type accountCreateArgs = {
    /**
     * Select specific fields to fetch from the account
     * 
    **/
    select?: accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: accountInclude | null
    /**
     * The data needed to create a account.
     * 
    **/
    data: XOR<accountCreateInput, accountUncheckedCreateInput>
  }


  /**
   * account createMany
   */
  export type accountCreateManyArgs = {
    data: Enumerable<accountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * account update
   */
  export type accountUpdateArgs = {
    /**
     * Select specific fields to fetch from the account
     * 
    **/
    select?: accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: accountInclude | null
    /**
     * The data needed to update a account.
     * 
    **/
    data: XOR<accountUpdateInput, accountUncheckedUpdateInput>
    /**
     * Choose, which account to update.
     * 
    **/
    where: accountWhereUniqueInput
  }


  /**
   * account updateMany
   */
  export type accountUpdateManyArgs = {
    data: XOR<accountUpdateManyMutationInput, accountUncheckedUpdateManyInput>
    where?: accountWhereInput
  }


  /**
   * account upsert
   */
  export type accountUpsertArgs = {
    /**
     * Select specific fields to fetch from the account
     * 
    **/
    select?: accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: accountInclude | null
    /**
     * The filter to search for the account to update in case it exists.
     * 
    **/
    where: accountWhereUniqueInput
    /**
     * In case the account found by the `where` argument doesn't exist, create a new account with this data.
     * 
    **/
    create: XOR<accountCreateInput, accountUncheckedCreateInput>
    /**
     * In case the account was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<accountUpdateInput, accountUncheckedUpdateInput>
  }


  /**
   * account delete
   */
  export type accountDeleteArgs = {
    /**
     * Select specific fields to fetch from the account
     * 
    **/
    select?: accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: accountInclude | null
    /**
     * Filter which account to delete.
     * 
    **/
    where: accountWhereUniqueInput
  }


  /**
   * account deleteMany
   */
  export type accountDeleteManyArgs = {
    where?: accountWhereInput
  }


  /**
   * account without action
   */
  export type accountArgs = {
    /**
     * Select specific fields to fetch from the account
     * 
    **/
    select?: accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: accountInclude | null
  }



  /**
   * Model session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which session to aggregate.
     * 
    **/
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<sessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: sessionWhereInput
    orderBy?: Enumerable<sessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: sessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Promise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type sessionSelect = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | usersArgs
  }

  export type sessionInclude = {
    user?: boolean | usersArgs
  }

  export type sessionGetPayload<
    S extends boolean | null | undefined | sessionArgs,
    U = keyof S
      > = S extends true
        ? session
    : S extends undefined
    ? never
    : S extends sessionArgs | sessionFindManyArgs
    ?'include' extends U
    ? session  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof session ?session [P]
  : 
          P extends 'user'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : session
  : session


  type sessionCountArgs = Merge<
    Omit<sessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface sessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {sessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'session'> extends True ? CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>> : CheckSelect<T, Prisma__sessionClient<session | null >, Prisma__sessionClient<sessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'session'> extends True ? CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>> : CheckSelect<T, Prisma__sessionClient<session | null >, Prisma__sessionClient<sessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sessionFindManyArgs>(
      args?: SelectSubset<T, sessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<session>>, PrismaPromise<Array<sessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {sessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends sessionCreateArgs>(
      args: SelectSubset<T, sessionCreateArgs>
    ): CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {sessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sessionCreateManyArgs>(
      args?: SelectSubset<T, sessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {sessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends sessionDeleteArgs>(
      args: SelectSubset<T, sessionDeleteArgs>
    ): CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {sessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sessionUpdateArgs>(
      args: SelectSubset<T, sessionUpdateArgs>
    ): CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {sessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sessionDeleteManyArgs>(
      args?: SelectSubset<T, sessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sessionUpdateManyArgs>(
      args: SelectSubset<T, sessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {sessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends sessionUpsertArgs>(
      args: SelectSubset<T, sessionUpsertArgs>
    ): CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends sessionCountArgs>(
      args?: Subset<T, sessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * session findUnique
   */
  export type sessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the session
     * 
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionInclude | null
    /**
     * Throw an Error if a session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which session to fetch.
     * 
    **/
    where: sessionWhereUniqueInput
  }


  /**
   * session findFirst
   */
  export type sessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the session
     * 
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionInclude | null
    /**
     * Throw an Error if a session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which session to fetch.
     * 
    **/
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<sessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     * 
    **/
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * session findMany
   */
  export type sessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the session
     * 
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionInclude | null
    /**
     * Filter, which sessions to fetch.
     * 
    **/
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<sessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sessions.
     * 
    **/
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * session create
   */
  export type sessionCreateArgs = {
    /**
     * Select specific fields to fetch from the session
     * 
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionInclude | null
    /**
     * The data needed to create a session.
     * 
    **/
    data: XOR<sessionCreateInput, sessionUncheckedCreateInput>
  }


  /**
   * session createMany
   */
  export type sessionCreateManyArgs = {
    data: Enumerable<sessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * session update
   */
  export type sessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the session
     * 
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionInclude | null
    /**
     * The data needed to update a session.
     * 
    **/
    data: XOR<sessionUpdateInput, sessionUncheckedUpdateInput>
    /**
     * Choose, which session to update.
     * 
    **/
    where: sessionWhereUniqueInput
  }


  /**
   * session updateMany
   */
  export type sessionUpdateManyArgs = {
    data: XOR<sessionUpdateManyMutationInput, sessionUncheckedUpdateManyInput>
    where?: sessionWhereInput
  }


  /**
   * session upsert
   */
  export type sessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the session
     * 
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionInclude | null
    /**
     * The filter to search for the session to update in case it exists.
     * 
    **/
    where: sessionWhereUniqueInput
    /**
     * In case the session found by the `where` argument doesn't exist, create a new session with this data.
     * 
    **/
    create: XOR<sessionCreateInput, sessionUncheckedCreateInput>
    /**
     * In case the session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<sessionUpdateInput, sessionUncheckedUpdateInput>
  }


  /**
   * session delete
   */
  export type sessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the session
     * 
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionInclude | null
    /**
     * Filter which session to delete.
     * 
    **/
    where: sessionWhereUniqueInput
  }


  /**
   * session deleteMany
   */
  export type sessionDeleteManyArgs = {
    where?: sessionWhereInput
  }


  /**
   * session without action
   */
  export type sessionArgs = {
    /**
     * Select specific fields to fetch from the session
     * 
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Promise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    accounts?: boolean | accountFindManyArgs
    sessions?: boolean | sessionFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    accounts?: boolean | accountFindManyArgs
    sessions?: boolean | sessionFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'accounts'
        ? Array < accountGetPayload<S['include'][P]>>  :
        P extends 'sessions'
        ? Array < sessionGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UsersCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'accounts'
        ? Array < accountGetPayload<S['select'][P]>>  :
        P extends 'sessions'
        ? Array < sessionGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UsersCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    accounts<T extends accountFindManyArgs = {}>(args?: Subset<T, accountFindManyArgs>): CheckSelect<T, PrismaPromise<Array<account>>, PrismaPromise<Array<accountGetPayload<T>>>>;

    sessions<T extends sessionFindManyArgs = {}>(args?: Subset<T, sessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<session>>, PrismaPromise<Array<sessionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model verificationToken
   */


  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs = {
    /**
     * Filter which verificationToken to aggregate.
     * 
    **/
    where?: verificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<verificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: verificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verificationTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned verificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs = {
    where?: verificationTokenWhereInput
    orderBy?: Enumerable<verificationTokenOrderByWithAggregationInput>
    by: Array<VerificationTokenScalarFieldEnum>
    having?: verificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }


  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Promise<
    Array<
      PickArray<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type verificationTokenSelect = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type verificationTokenGetPayload<
    S extends boolean | null | undefined | verificationTokenArgs,
    U = keyof S
      > = S extends true
        ? verificationToken
    : S extends undefined
    ? never
    : S extends verificationTokenArgs | verificationTokenFindManyArgs
    ?'include' extends U
    ? verificationToken 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof verificationToken ?verificationToken [P]
  : 
     never
  } 
    : verificationToken
  : verificationToken


  type verificationTokenCountArgs = Merge<
    Omit<verificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }
  >

  export interface verificationTokenDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {verificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends verificationTokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, verificationTokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'verificationToken'> extends True ? CheckSelect<T, Prisma__verificationTokenClient<verificationToken>, Prisma__verificationTokenClient<verificationTokenGetPayload<T>>> : CheckSelect<T, Prisma__verificationTokenClient<verificationToken | null >, Prisma__verificationTokenClient<verificationTokenGetPayload<T> | null >>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends verificationTokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, verificationTokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'verificationToken'> extends True ? CheckSelect<T, Prisma__verificationTokenClient<verificationToken>, Prisma__verificationTokenClient<verificationTokenGetPayload<T>>> : CheckSelect<T, Prisma__verificationTokenClient<verificationToken | null >, Prisma__verificationTokenClient<verificationTokenGetPayload<T> | null >>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends verificationTokenFindManyArgs>(
      args?: SelectSubset<T, verificationTokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<verificationToken>>, PrismaPromise<Array<verificationTokenGetPayload<T>>>>

    /**
     * Create a VerificationToken.
     * @param {verificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends verificationTokenCreateArgs>(
      args: SelectSubset<T, verificationTokenCreateArgs>
    ): CheckSelect<T, Prisma__verificationTokenClient<verificationToken>, Prisma__verificationTokenClient<verificationTokenGetPayload<T>>>

    /**
     * Create many VerificationTokens.
     *     @param {verificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends verificationTokenCreateManyArgs>(
      args?: SelectSubset<T, verificationTokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {verificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends verificationTokenDeleteArgs>(
      args: SelectSubset<T, verificationTokenDeleteArgs>
    ): CheckSelect<T, Prisma__verificationTokenClient<verificationToken>, Prisma__verificationTokenClient<verificationTokenGetPayload<T>>>

    /**
     * Update one VerificationToken.
     * @param {verificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends verificationTokenUpdateArgs>(
      args: SelectSubset<T, verificationTokenUpdateArgs>
    ): CheckSelect<T, Prisma__verificationTokenClient<verificationToken>, Prisma__verificationTokenClient<verificationTokenGetPayload<T>>>

    /**
     * Delete zero or more VerificationTokens.
     * @param {verificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends verificationTokenDeleteManyArgs>(
      args?: SelectSubset<T, verificationTokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends verificationTokenUpdateManyArgs>(
      args: SelectSubset<T, verificationTokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {verificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends verificationTokenUpsertArgs>(
      args: SelectSubset<T, verificationTokenUpsertArgs>
    ): CheckSelect<T, Prisma__verificationTokenClient<verificationToken>, Prisma__verificationTokenClient<verificationTokenGetPayload<T>>>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends verificationTokenCountArgs>(
      args?: Subset<T, verificationTokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for verificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__verificationTokenClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * verificationToken findUnique
   */
  export type verificationTokenFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the verificationToken
     * 
    **/
    select?: verificationTokenSelect | null
    /**
     * Throw an Error if a verificationToken can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which verificationToken to fetch.
     * 
    **/
    where: verificationTokenWhereUniqueInput
  }


  /**
   * verificationToken findFirst
   */
  export type verificationTokenFindFirstArgs = {
    /**
     * Select specific fields to fetch from the verificationToken
     * 
    **/
    select?: verificationTokenSelect | null
    /**
     * Throw an Error if a verificationToken can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which verificationToken to fetch.
     * 
    **/
    where?: verificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<verificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for verificationTokens.
     * 
    **/
    cursor?: verificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verificationTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of verificationTokens.
     * 
    **/
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * verificationToken findMany
   */
  export type verificationTokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the verificationToken
     * 
    **/
    select?: verificationTokenSelect | null
    /**
     * Filter, which verificationTokens to fetch.
     * 
    **/
    where?: verificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<verificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing verificationTokens.
     * 
    **/
    cursor?: verificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verificationTokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * verificationToken create
   */
  export type verificationTokenCreateArgs = {
    /**
     * Select specific fields to fetch from the verificationToken
     * 
    **/
    select?: verificationTokenSelect | null
    /**
     * The data needed to create a verificationToken.
     * 
    **/
    data: XOR<verificationTokenCreateInput, verificationTokenUncheckedCreateInput>
  }


  /**
   * verificationToken createMany
   */
  export type verificationTokenCreateManyArgs = {
    data: Enumerable<verificationTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * verificationToken update
   */
  export type verificationTokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the verificationToken
     * 
    **/
    select?: verificationTokenSelect | null
    /**
     * The data needed to update a verificationToken.
     * 
    **/
    data: XOR<verificationTokenUpdateInput, verificationTokenUncheckedUpdateInput>
    /**
     * Choose, which verificationToken to update.
     * 
    **/
    where: verificationTokenWhereUniqueInput
  }


  /**
   * verificationToken updateMany
   */
  export type verificationTokenUpdateManyArgs = {
    data: XOR<verificationTokenUpdateManyMutationInput, verificationTokenUncheckedUpdateManyInput>
    where?: verificationTokenWhereInput
  }


  /**
   * verificationToken upsert
   */
  export type verificationTokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the verificationToken
     * 
    **/
    select?: verificationTokenSelect | null
    /**
     * The filter to search for the verificationToken to update in case it exists.
     * 
    **/
    where: verificationTokenWhereUniqueInput
    /**
     * In case the verificationToken found by the `where` argument doesn't exist, create a new verificationToken with this data.
     * 
    **/
    create: XOR<verificationTokenCreateInput, verificationTokenUncheckedCreateInput>
    /**
     * In case the verificationToken was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<verificationTokenUpdateInput, verificationTokenUncheckedUpdateInput>
  }


  /**
   * verificationToken delete
   */
  export type verificationTokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the verificationToken
     * 
    **/
    select?: verificationTokenSelect | null
    /**
     * Filter which verificationToken to delete.
     * 
    **/
    where: verificationTokenWhereUniqueInput
  }


  /**
   * verificationToken deleteMany
   */
  export type verificationTokenDeleteManyArgs = {
    where?: verificationTokenWhereInput
  }


  /**
   * verificationToken without action
   */
  export type verificationTokenArgs = {
    /**
     * Select specific fields to fetch from the verificationToken
     * 
    **/
    select?: verificationTokenSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DebateScalarFieldEnum: {
    id: 'id',
    date: 'date',
    topic_name: 'topic_name'
  };

  export type DebateScalarFieldEnum = (typeof DebateScalarFieldEnum)[keyof typeof DebateScalarFieldEnum]


  export const SidesScalarFieldEnum: {
    id: 'id',
    topic_id: 'topic_id',
    owner_id: 'owner_id',
    debate_id: 'debate_id',
    side: 'side'
  };

  export type SidesScalarFieldEnum = (typeof SidesScalarFieldEnum)[keyof typeof SidesScalarFieldEnum]


  export const TopicScalarFieldEnum: {
    id: 'id',
    name: 'name',
    owner_id: 'owner_id'
  };

  export type TopicScalarFieldEnum = (typeof TopicScalarFieldEnum)[keyof typeof TopicScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    id: 'id',
    topic_id: 'topic_id',
    owner_id: 'owner_id',
    debate_id: 'debate_id'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    oauth_token_secret: 'oauth_token_secret',
    oauth_token: 'oauth_token'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type debateWhereInput = {
    AND?: Enumerable<debateWhereInput>
    OR?: Enumerable<debateWhereInput>
    NOT?: Enumerable<debateWhereInput>
    id?: IntFilter | number
    date?: DateTimeNullableFilter | Date | string | null
    topic_name?: StringNullableFilter | string | null
    sides?: SidesListRelationFilter
    vote?: VoteListRelationFilter
  }

  export type debateOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    topic_name?: SortOrder
    sides?: sidesOrderByRelationAggregateInput
    vote?: voteOrderByRelationAggregateInput
  }

  export type debateWhereUniqueInput = {
    id?: number
  }

  export type debateOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    topic_name?: SortOrder
    _count?: debateCountOrderByAggregateInput
    _avg?: debateAvgOrderByAggregateInput
    _max?: debateMaxOrderByAggregateInput
    _min?: debateMinOrderByAggregateInput
    _sum?: debateSumOrderByAggregateInput
  }

  export type debateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<debateScalarWhereWithAggregatesInput>
    OR?: Enumerable<debateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<debateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    topic_name?: StringNullableWithAggregatesFilter | string | null
  }

  export type sidesWhereInput = {
    AND?: Enumerable<sidesWhereInput>
    OR?: Enumerable<sidesWhereInput>
    NOT?: Enumerable<sidesWhereInput>
    id?: IntFilter | number
    topic_id?: IntNullableFilter | number | null
    owner_id?: StringNullableFilter | string | null
    debate_id?: IntFilter | number
    side?: EnumsideNullableFilter | side | null
    debate?: XOR<DebateRelationFilter, debateWhereInput>
    topic?: XOR<TopicRelationFilter, topicWhereInput> | null
  }

  export type sidesOrderByWithRelationInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
    side?: SortOrder
    debate?: debateOrderByWithRelationInput
    topic?: topicOrderByWithRelationInput
  }

  export type sidesWhereUniqueInput = {
    id?: number
  }

  export type sidesOrderByWithAggregationInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
    side?: SortOrder
    _count?: sidesCountOrderByAggregateInput
    _avg?: sidesAvgOrderByAggregateInput
    _max?: sidesMaxOrderByAggregateInput
    _min?: sidesMinOrderByAggregateInput
    _sum?: sidesSumOrderByAggregateInput
  }

  export type sidesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<sidesScalarWhereWithAggregatesInput>
    OR?: Enumerable<sidesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<sidesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    topic_id?: IntNullableWithAggregatesFilter | number | null
    owner_id?: StringNullableWithAggregatesFilter | string | null
    debate_id?: IntWithAggregatesFilter | number
    side?: EnumsideNullableWithAggregatesFilter | side | null
  }

  export type topicWhereInput = {
    AND?: Enumerable<topicWhereInput>
    OR?: Enumerable<topicWhereInput>
    NOT?: Enumerable<topicWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    owner_id?: StringNullableFilter | string | null
    sides?: SidesListRelationFilter
    vote?: VoteListRelationFilter
  }

  export type topicOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
    sides?: sidesOrderByRelationAggregateInput
    vote?: voteOrderByRelationAggregateInput
  }

  export type topicWhereUniqueInput = {
    id?: number
  }

  export type topicOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
    _count?: topicCountOrderByAggregateInput
    _avg?: topicAvgOrderByAggregateInput
    _max?: topicMaxOrderByAggregateInput
    _min?: topicMinOrderByAggregateInput
    _sum?: topicSumOrderByAggregateInput
  }

  export type topicScalarWhereWithAggregatesInput = {
    AND?: Enumerable<topicScalarWhereWithAggregatesInput>
    OR?: Enumerable<topicScalarWhereWithAggregatesInput>
    NOT?: Enumerable<topicScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    owner_id?: StringNullableWithAggregatesFilter | string | null
  }

  export type voteWhereInput = {
    AND?: Enumerable<voteWhereInput>
    OR?: Enumerable<voteWhereInput>
    NOT?: Enumerable<voteWhereInput>
    id?: IntFilter | number
    topic_id?: IntNullableFilter | number | null
    owner_id?: StringNullableFilter | string | null
    debate_id?: IntFilter | number
    debate?: XOR<DebateRelationFilter, debateWhereInput>
    topic?: XOR<TopicRelationFilter, topicWhereInput> | null
  }

  export type voteOrderByWithRelationInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
    debate?: debateOrderByWithRelationInput
    topic?: topicOrderByWithRelationInput
  }

  export type voteWhereUniqueInput = {
    id?: number
  }

  export type voteOrderByWithAggregationInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
    _count?: voteCountOrderByAggregateInput
    _avg?: voteAvgOrderByAggregateInput
    _max?: voteMaxOrderByAggregateInput
    _min?: voteMinOrderByAggregateInput
    _sum?: voteSumOrderByAggregateInput
  }

  export type voteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<voteScalarWhereWithAggregatesInput>
    OR?: Enumerable<voteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<voteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    topic_id?: IntNullableWithAggregatesFilter | number | null
    owner_id?: StringNullableWithAggregatesFilter | string | null
    debate_id?: IntWithAggregatesFilter | number
  }

  export type accountWhereInput = {
    AND?: Enumerable<accountWhereInput>
    OR?: Enumerable<accountWhereInput>
    NOT?: Enumerable<accountWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
    oauth_token_secret?: StringNullableFilter | string | null
    oauth_token?: StringNullableFilter | string | null
    user?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type accountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    oauth_token_secret?: SortOrder
    oauth_token?: SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type accountWhereUniqueInput = {
    id?: string
    provider_providerAccountId?: accountProviderProviderAccountIdCompoundUniqueInput
  }

  export type accountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    oauth_token_secret?: SortOrder
    oauth_token?: SortOrder
    _count?: accountCountOrderByAggregateInput
    _avg?: accountAvgOrderByAggregateInput
    _max?: accountMaxOrderByAggregateInput
    _min?: accountMinOrderByAggregateInput
    _sum?: accountSumOrderByAggregateInput
  }

  export type accountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<accountScalarWhereWithAggregatesInput>
    OR?: Enumerable<accountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<accountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    provider?: StringWithAggregatesFilter | string
    providerAccountId?: StringWithAggregatesFilter | string
    refresh_token?: StringNullableWithAggregatesFilter | string | null
    access_token?: StringNullableWithAggregatesFilter | string | null
    expires_at?: IntNullableWithAggregatesFilter | number | null
    token_type?: StringNullableWithAggregatesFilter | string | null
    scope?: StringNullableWithAggregatesFilter | string | null
    id_token?: StringNullableWithAggregatesFilter | string | null
    session_state?: StringNullableWithAggregatesFilter | string | null
    oauth_token_secret?: StringNullableWithAggregatesFilter | string | null
    oauth_token?: StringNullableWithAggregatesFilter | string | null
  }

  export type sessionWhereInput = {
    AND?: Enumerable<sessionWhereInput>
    OR?: Enumerable<sessionWhereInput>
    NOT?: Enumerable<sessionWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    user?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type sessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type sessionWhereUniqueInput = {
    id?: string
    sessionToken?: string
  }

  export type sessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: sessionCountOrderByAggregateInput
    _max?: sessionMaxOrderByAggregateInput
    _min?: sessionMinOrderByAggregateInput
  }

  export type sessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<sessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<sessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<sessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionToken?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    emailVerified?: DateTimeNullableFilter | Date | string | null
    image?: StringNullableFilter | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    accounts?: accountOrderByRelationAggregateInput
    sessions?: sessionOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    image?: StringNullableWithAggregatesFilter | string | null
  }

  export type verificationTokenWhereInput = {
    AND?: Enumerable<verificationTokenWhereInput>
    OR?: Enumerable<verificationTokenWhereInput>
    NOT?: Enumerable<verificationTokenWhereInput>
    identifier?: StringFilter | string
    token?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type verificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type verificationTokenWhereUniqueInput = {
    token?: string
    identifier_token?: verificationTokenIdentifierTokenCompoundUniqueInput
  }

  export type verificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: verificationTokenCountOrderByAggregateInput
    _max?: verificationTokenMaxOrderByAggregateInput
    _min?: verificationTokenMinOrderByAggregateInput
  }

  export type verificationTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<verificationTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<verificationTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<verificationTokenScalarWhereWithAggregatesInput>
    identifier?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type debateCreateInput = {
    date?: Date | string | null
    topic_name?: string | null
    sides?: sidesCreateNestedManyWithoutDebateInput
    vote?: voteCreateNestedManyWithoutDebateInput
  }

  export type debateUncheckedCreateInput = {
    id?: number
    date?: Date | string | null
    topic_name?: string | null
    sides?: sidesUncheckedCreateNestedManyWithoutDebateInput
    vote?: voteUncheckedCreateNestedManyWithoutDebateInput
  }

  export type debateUpdateInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    topic_name?: NullableStringFieldUpdateOperationsInput | string | null
    sides?: sidesUpdateManyWithoutDebateInput
    vote?: voteUpdateManyWithoutDebateInput
  }

  export type debateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    topic_name?: NullableStringFieldUpdateOperationsInput | string | null
    sides?: sidesUncheckedUpdateManyWithoutDebateInput
    vote?: voteUncheckedUpdateManyWithoutDebateInput
  }

  export type debateCreateManyInput = {
    id?: number
    date?: Date | string | null
    topic_name?: string | null
  }

  export type debateUpdateManyMutationInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    topic_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type debateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    topic_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sidesCreateInput = {
    owner_id?: string | null
    side?: side | null
    debate: debateCreateNestedOneWithoutSidesInput
    topic?: topicCreateNestedOneWithoutSidesInput
  }

  export type sidesUncheckedCreateInput = {
    id?: number
    topic_id?: number | null
    owner_id?: string | null
    debate_id: number
    side?: side | null
  }

  export type sidesUpdateInput = {
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    side?: NullableEnumsideFieldUpdateOperationsInput | side | null
    debate?: debateUpdateOneRequiredWithoutSidesInput
    topic?: topicUpdateOneWithoutSidesInput
  }

  export type sidesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic_id?: NullableIntFieldUpdateOperationsInput | number | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    debate_id?: IntFieldUpdateOperationsInput | number
    side?: NullableEnumsideFieldUpdateOperationsInput | side | null
  }

  export type sidesCreateManyInput = {
    id?: number
    topic_id?: number | null
    owner_id?: string | null
    debate_id: number
    side?: side | null
  }

  export type sidesUpdateManyMutationInput = {
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    side?: NullableEnumsideFieldUpdateOperationsInput | side | null
  }

  export type sidesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic_id?: NullableIntFieldUpdateOperationsInput | number | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    debate_id?: IntFieldUpdateOperationsInput | number
    side?: NullableEnumsideFieldUpdateOperationsInput | side | null
  }

  export type topicCreateInput = {
    name?: string | null
    owner_id?: string | null
    sides?: sidesCreateNestedManyWithoutTopicInput
    vote?: voteCreateNestedManyWithoutTopicInput
  }

  export type topicUncheckedCreateInput = {
    id?: number
    name?: string | null
    owner_id?: string | null
    sides?: sidesUncheckedCreateNestedManyWithoutTopicInput
    vote?: voteUncheckedCreateNestedManyWithoutTopicInput
  }

  export type topicUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    sides?: sidesUpdateManyWithoutTopicInput
    vote?: voteUpdateManyWithoutTopicInput
  }

  export type topicUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    sides?: sidesUncheckedUpdateManyWithoutTopicInput
    vote?: voteUncheckedUpdateManyWithoutTopicInput
  }

  export type topicCreateManyInput = {
    id?: number
    name?: string | null
    owner_id?: string | null
  }

  export type topicUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type topicUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type voteCreateInput = {
    owner_id?: string | null
    debate: debateCreateNestedOneWithoutVoteInput
    topic?: topicCreateNestedOneWithoutVoteInput
  }

  export type voteUncheckedCreateInput = {
    id?: number
    topic_id?: number | null
    owner_id?: string | null
    debate_id: number
  }

  export type voteUpdateInput = {
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    debate?: debateUpdateOneRequiredWithoutVoteInput
    topic?: topicUpdateOneWithoutVoteInput
  }

  export type voteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic_id?: NullableIntFieldUpdateOperationsInput | number | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    debate_id?: IntFieldUpdateOperationsInput | number
  }

  export type voteCreateManyInput = {
    id?: number
    topic_id?: number | null
    owner_id?: string | null
    debate_id: number
  }

  export type voteUpdateManyMutationInput = {
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type voteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic_id?: NullableIntFieldUpdateOperationsInput | number | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    debate_id?: IntFieldUpdateOperationsInput | number
  }

  export type accountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    oauth_token_secret?: string | null
    oauth_token?: string | null
    user: usersCreateNestedOneWithoutAccountsInput
  }

  export type accountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    oauth_token_secret?: string | null
    oauth_token?: string | null
  }

  export type accountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token_secret?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token?: NullableStringFieldUpdateOperationsInput | string | null
    user?: usersUpdateOneRequiredWithoutAccountsInput
  }

  export type accountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token_secret?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type accountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    oauth_token_secret?: string | null
    oauth_token?: string | null
  }

  export type accountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token_secret?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type accountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token_secret?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: usersCreateNestedOneWithoutSessionsInput
  }

  export type sessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type sessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutSessionsInput
  }

  export type sessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type sessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: accountCreateNestedManyWithoutUserInput
    sessions?: sessionCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: accountUncheckedCreateNestedManyWithoutUserInput
    sessions?: sessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: accountUpdateManyWithoutUserInput
    sessions?: sessionUpdateManyWithoutUserInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: accountUncheckedUpdateManyWithoutUserInput
    sessions?: sessionUncheckedUpdateManyWithoutUserInput
  }

  export type usersCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type verificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type verificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type verificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type verificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type verificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type verificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type verificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type SidesListRelationFilter = {
    every?: sidesWhereInput
    some?: sidesWhereInput
    none?: sidesWhereInput
  }

  export type VoteListRelationFilter = {
    every?: voteWhereInput
    some?: voteWhereInput
    none?: voteWhereInput
  }

  export type sidesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type voteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type debateCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    topic_name?: SortOrder
  }

  export type debateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type debateMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    topic_name?: SortOrder
  }

  export type debateMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    topic_name?: SortOrder
  }

  export type debateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type EnumsideNullableFilter = {
    equals?: side | null
    in?: Enumerable<side> | null
    notIn?: Enumerable<side> | null
    not?: NestedEnumsideNullableFilter | side | null
  }

  export type DebateRelationFilter = {
    is?: debateWhereInput
    isNot?: debateWhereInput
  }

  export type TopicRelationFilter = {
    is?: topicWhereInput | null
    isNot?: topicWhereInput | null
  }

  export type sidesCountOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
    side?: SortOrder
  }

  export type sidesAvgOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    debate_id?: SortOrder
  }

  export type sidesMaxOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
    side?: SortOrder
  }

  export type sidesMinOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
    side?: SortOrder
  }

  export type sidesSumOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    debate_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumsideNullableWithAggregatesFilter = {
    equals?: side | null
    in?: Enumerable<side> | null
    notIn?: Enumerable<side> | null
    not?: NestedEnumsideNullableWithAggregatesFilter | side | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumsideNullableFilter
    _max?: NestedEnumsideNullableFilter
  }

  export type topicCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
  }

  export type topicAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type topicMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
  }

  export type topicMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
  }

  export type topicSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type voteCountOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
  }

  export type voteAvgOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    debate_id?: SortOrder
  }

  export type voteMaxOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
  }

  export type voteMinOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    owner_id?: SortOrder
    debate_id?: SortOrder
  }

  export type voteSumOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    debate_id?: SortOrder
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type accountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type accountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    oauth_token_secret?: SortOrder
    oauth_token?: SortOrder
  }

  export type accountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type accountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    oauth_token_secret?: SortOrder
    oauth_token?: SortOrder
  }

  export type accountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    oauth_token_secret?: SortOrder
    oauth_token?: SortOrder
  }

  export type accountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type sessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type sessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type sessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type AccountListRelationFilter = {
    every?: accountWhereInput
    some?: accountWhereInput
    none?: accountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: sessionWhereInput
    some?: sessionWhereInput
    none?: sessionWhereInput
  }

  export type accountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type verificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type verificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type verificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type verificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type sidesCreateNestedManyWithoutDebateInput = {
    create?: XOR<Enumerable<sidesCreateWithoutDebateInput>, Enumerable<sidesUncheckedCreateWithoutDebateInput>>
    connectOrCreate?: Enumerable<sidesCreateOrConnectWithoutDebateInput>
    createMany?: sidesCreateManyDebateInputEnvelope
    connect?: Enumerable<sidesWhereUniqueInput>
  }

  export type voteCreateNestedManyWithoutDebateInput = {
    create?: XOR<Enumerable<voteCreateWithoutDebateInput>, Enumerable<voteUncheckedCreateWithoutDebateInput>>
    connectOrCreate?: Enumerable<voteCreateOrConnectWithoutDebateInput>
    createMany?: voteCreateManyDebateInputEnvelope
    connect?: Enumerable<voteWhereUniqueInput>
  }

  export type sidesUncheckedCreateNestedManyWithoutDebateInput = {
    create?: XOR<Enumerable<sidesCreateWithoutDebateInput>, Enumerable<sidesUncheckedCreateWithoutDebateInput>>
    connectOrCreate?: Enumerable<sidesCreateOrConnectWithoutDebateInput>
    createMany?: sidesCreateManyDebateInputEnvelope
    connect?: Enumerable<sidesWhereUniqueInput>
  }

  export type voteUncheckedCreateNestedManyWithoutDebateInput = {
    create?: XOR<Enumerable<voteCreateWithoutDebateInput>, Enumerable<voteUncheckedCreateWithoutDebateInput>>
    connectOrCreate?: Enumerable<voteCreateOrConnectWithoutDebateInput>
    createMany?: voteCreateManyDebateInputEnvelope
    connect?: Enumerable<voteWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type sidesUpdateManyWithoutDebateInput = {
    create?: XOR<Enumerable<sidesCreateWithoutDebateInput>, Enumerable<sidesUncheckedCreateWithoutDebateInput>>
    connectOrCreate?: Enumerable<sidesCreateOrConnectWithoutDebateInput>
    upsert?: Enumerable<sidesUpsertWithWhereUniqueWithoutDebateInput>
    createMany?: sidesCreateManyDebateInputEnvelope
    set?: Enumerable<sidesWhereUniqueInput>
    disconnect?: Enumerable<sidesWhereUniqueInput>
    delete?: Enumerable<sidesWhereUniqueInput>
    connect?: Enumerable<sidesWhereUniqueInput>
    update?: Enumerable<sidesUpdateWithWhereUniqueWithoutDebateInput>
    updateMany?: Enumerable<sidesUpdateManyWithWhereWithoutDebateInput>
    deleteMany?: Enumerable<sidesScalarWhereInput>
  }

  export type voteUpdateManyWithoutDebateInput = {
    create?: XOR<Enumerable<voteCreateWithoutDebateInput>, Enumerable<voteUncheckedCreateWithoutDebateInput>>
    connectOrCreate?: Enumerable<voteCreateOrConnectWithoutDebateInput>
    upsert?: Enumerable<voteUpsertWithWhereUniqueWithoutDebateInput>
    createMany?: voteCreateManyDebateInputEnvelope
    set?: Enumerable<voteWhereUniqueInput>
    disconnect?: Enumerable<voteWhereUniqueInput>
    delete?: Enumerable<voteWhereUniqueInput>
    connect?: Enumerable<voteWhereUniqueInput>
    update?: Enumerable<voteUpdateWithWhereUniqueWithoutDebateInput>
    updateMany?: Enumerable<voteUpdateManyWithWhereWithoutDebateInput>
    deleteMany?: Enumerable<voteScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type sidesUncheckedUpdateManyWithoutDebateInput = {
    create?: XOR<Enumerable<sidesCreateWithoutDebateInput>, Enumerable<sidesUncheckedCreateWithoutDebateInput>>
    connectOrCreate?: Enumerable<sidesCreateOrConnectWithoutDebateInput>
    upsert?: Enumerable<sidesUpsertWithWhereUniqueWithoutDebateInput>
    createMany?: sidesCreateManyDebateInputEnvelope
    set?: Enumerable<sidesWhereUniqueInput>
    disconnect?: Enumerable<sidesWhereUniqueInput>
    delete?: Enumerable<sidesWhereUniqueInput>
    connect?: Enumerable<sidesWhereUniqueInput>
    update?: Enumerable<sidesUpdateWithWhereUniqueWithoutDebateInput>
    updateMany?: Enumerable<sidesUpdateManyWithWhereWithoutDebateInput>
    deleteMany?: Enumerable<sidesScalarWhereInput>
  }

  export type voteUncheckedUpdateManyWithoutDebateInput = {
    create?: XOR<Enumerable<voteCreateWithoutDebateInput>, Enumerable<voteUncheckedCreateWithoutDebateInput>>
    connectOrCreate?: Enumerable<voteCreateOrConnectWithoutDebateInput>
    upsert?: Enumerable<voteUpsertWithWhereUniqueWithoutDebateInput>
    createMany?: voteCreateManyDebateInputEnvelope
    set?: Enumerable<voteWhereUniqueInput>
    disconnect?: Enumerable<voteWhereUniqueInput>
    delete?: Enumerable<voteWhereUniqueInput>
    connect?: Enumerable<voteWhereUniqueInput>
    update?: Enumerable<voteUpdateWithWhereUniqueWithoutDebateInput>
    updateMany?: Enumerable<voteUpdateManyWithWhereWithoutDebateInput>
    deleteMany?: Enumerable<voteScalarWhereInput>
  }

  export type debateCreateNestedOneWithoutSidesInput = {
    create?: XOR<debateCreateWithoutSidesInput, debateUncheckedCreateWithoutSidesInput>
    connectOrCreate?: debateCreateOrConnectWithoutSidesInput
    connect?: debateWhereUniqueInput
  }

  export type topicCreateNestedOneWithoutSidesInput = {
    create?: XOR<topicCreateWithoutSidesInput, topicUncheckedCreateWithoutSidesInput>
    connectOrCreate?: topicCreateOrConnectWithoutSidesInput
    connect?: topicWhereUniqueInput
  }

  export type NullableEnumsideFieldUpdateOperationsInput = {
    set?: side | null
  }

  export type debateUpdateOneRequiredWithoutSidesInput = {
    create?: XOR<debateCreateWithoutSidesInput, debateUncheckedCreateWithoutSidesInput>
    connectOrCreate?: debateCreateOrConnectWithoutSidesInput
    upsert?: debateUpsertWithoutSidesInput
    connect?: debateWhereUniqueInput
    update?: XOR<debateUpdateWithoutSidesInput, debateUncheckedUpdateWithoutSidesInput>
  }

  export type topicUpdateOneWithoutSidesInput = {
    create?: XOR<topicCreateWithoutSidesInput, topicUncheckedCreateWithoutSidesInput>
    connectOrCreate?: topicCreateOrConnectWithoutSidesInput
    upsert?: topicUpsertWithoutSidesInput
    disconnect?: boolean
    delete?: boolean
    connect?: topicWhereUniqueInput
    update?: XOR<topicUpdateWithoutSidesInput, topicUncheckedUpdateWithoutSidesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type sidesCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<sidesCreateWithoutTopicInput>, Enumerable<sidesUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<sidesCreateOrConnectWithoutTopicInput>
    createMany?: sidesCreateManyTopicInputEnvelope
    connect?: Enumerable<sidesWhereUniqueInput>
  }

  export type voteCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<voteCreateWithoutTopicInput>, Enumerable<voteUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<voteCreateOrConnectWithoutTopicInput>
    createMany?: voteCreateManyTopicInputEnvelope
    connect?: Enumerable<voteWhereUniqueInput>
  }

  export type sidesUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<sidesCreateWithoutTopicInput>, Enumerable<sidesUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<sidesCreateOrConnectWithoutTopicInput>
    createMany?: sidesCreateManyTopicInputEnvelope
    connect?: Enumerable<sidesWhereUniqueInput>
  }

  export type voteUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<voteCreateWithoutTopicInput>, Enumerable<voteUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<voteCreateOrConnectWithoutTopicInput>
    createMany?: voteCreateManyTopicInputEnvelope
    connect?: Enumerable<voteWhereUniqueInput>
  }

  export type sidesUpdateManyWithoutTopicInput = {
    create?: XOR<Enumerable<sidesCreateWithoutTopicInput>, Enumerable<sidesUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<sidesCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<sidesUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: sidesCreateManyTopicInputEnvelope
    set?: Enumerable<sidesWhereUniqueInput>
    disconnect?: Enumerable<sidesWhereUniqueInput>
    delete?: Enumerable<sidesWhereUniqueInput>
    connect?: Enumerable<sidesWhereUniqueInput>
    update?: Enumerable<sidesUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<sidesUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<sidesScalarWhereInput>
  }

  export type voteUpdateManyWithoutTopicInput = {
    create?: XOR<Enumerable<voteCreateWithoutTopicInput>, Enumerable<voteUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<voteCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<voteUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: voteCreateManyTopicInputEnvelope
    set?: Enumerable<voteWhereUniqueInput>
    disconnect?: Enumerable<voteWhereUniqueInput>
    delete?: Enumerable<voteWhereUniqueInput>
    connect?: Enumerable<voteWhereUniqueInput>
    update?: Enumerable<voteUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<voteUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<voteScalarWhereInput>
  }

  export type sidesUncheckedUpdateManyWithoutTopicInput = {
    create?: XOR<Enumerable<sidesCreateWithoutTopicInput>, Enumerable<sidesUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<sidesCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<sidesUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: sidesCreateManyTopicInputEnvelope
    set?: Enumerable<sidesWhereUniqueInput>
    disconnect?: Enumerable<sidesWhereUniqueInput>
    delete?: Enumerable<sidesWhereUniqueInput>
    connect?: Enumerable<sidesWhereUniqueInput>
    update?: Enumerable<sidesUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<sidesUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<sidesScalarWhereInput>
  }

  export type voteUncheckedUpdateManyWithoutTopicInput = {
    create?: XOR<Enumerable<voteCreateWithoutTopicInput>, Enumerable<voteUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<voteCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<voteUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: voteCreateManyTopicInputEnvelope
    set?: Enumerable<voteWhereUniqueInput>
    disconnect?: Enumerable<voteWhereUniqueInput>
    delete?: Enumerable<voteWhereUniqueInput>
    connect?: Enumerable<voteWhereUniqueInput>
    update?: Enumerable<voteUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<voteUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<voteScalarWhereInput>
  }

  export type debateCreateNestedOneWithoutVoteInput = {
    create?: XOR<debateCreateWithoutVoteInput, debateUncheckedCreateWithoutVoteInput>
    connectOrCreate?: debateCreateOrConnectWithoutVoteInput
    connect?: debateWhereUniqueInput
  }

  export type topicCreateNestedOneWithoutVoteInput = {
    create?: XOR<topicCreateWithoutVoteInput, topicUncheckedCreateWithoutVoteInput>
    connectOrCreate?: topicCreateOrConnectWithoutVoteInput
    connect?: topicWhereUniqueInput
  }

  export type debateUpdateOneRequiredWithoutVoteInput = {
    create?: XOR<debateCreateWithoutVoteInput, debateUncheckedCreateWithoutVoteInput>
    connectOrCreate?: debateCreateOrConnectWithoutVoteInput
    upsert?: debateUpsertWithoutVoteInput
    connect?: debateWhereUniqueInput
    update?: XOR<debateUpdateWithoutVoteInput, debateUncheckedUpdateWithoutVoteInput>
  }

  export type topicUpdateOneWithoutVoteInput = {
    create?: XOR<topicCreateWithoutVoteInput, topicUncheckedCreateWithoutVoteInput>
    connectOrCreate?: topicCreateOrConnectWithoutVoteInput
    upsert?: topicUpsertWithoutVoteInput
    disconnect?: boolean
    delete?: boolean
    connect?: topicWhereUniqueInput
    update?: XOR<topicUpdateWithoutVoteInput, topicUncheckedUpdateWithoutVoteInput>
  }

  export type usersCreateNestedOneWithoutAccountsInput = {
    create?: XOR<usersCreateWithoutAccountsInput, usersUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: usersCreateOrConnectWithoutAccountsInput
    connect?: usersWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type usersUpdateOneRequiredWithoutAccountsInput = {
    create?: XOR<usersCreateWithoutAccountsInput, usersUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: usersCreateOrConnectWithoutAccountsInput
    upsert?: usersUpsertWithoutAccountsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutAccountsInput, usersUncheckedUpdateWithoutAccountsInput>
  }

  export type usersCreateNestedOneWithoutSessionsInput = {
    create?: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutSessionsInput
    connect?: usersWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneRequiredWithoutSessionsInput = {
    create?: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutSessionsInput
    upsert?: usersUpsertWithoutSessionsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutSessionsInput, usersUncheckedUpdateWithoutSessionsInput>
  }

  export type accountCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<accountCreateWithoutUserInput>, Enumerable<accountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<accountCreateOrConnectWithoutUserInput>
    createMany?: accountCreateManyUserInputEnvelope
    connect?: Enumerable<accountWhereUniqueInput>
  }

  export type sessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionCreateWithoutUserInput>, Enumerable<sessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionCreateOrConnectWithoutUserInput>
    createMany?: sessionCreateManyUserInputEnvelope
    connect?: Enumerable<sessionWhereUniqueInput>
  }

  export type accountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<accountCreateWithoutUserInput>, Enumerable<accountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<accountCreateOrConnectWithoutUserInput>
    createMany?: accountCreateManyUserInputEnvelope
    connect?: Enumerable<accountWhereUniqueInput>
  }

  export type sessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionCreateWithoutUserInput>, Enumerable<sessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionCreateOrConnectWithoutUserInput>
    createMany?: sessionCreateManyUserInputEnvelope
    connect?: Enumerable<sessionWhereUniqueInput>
  }

  export type accountUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<accountCreateWithoutUserInput>, Enumerable<accountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<accountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<accountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: accountCreateManyUserInputEnvelope
    set?: Enumerable<accountWhereUniqueInput>
    disconnect?: Enumerable<accountWhereUniqueInput>
    delete?: Enumerable<accountWhereUniqueInput>
    connect?: Enumerable<accountWhereUniqueInput>
    update?: Enumerable<accountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<accountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<accountScalarWhereInput>
  }

  export type sessionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionCreateWithoutUserInput>, Enumerable<sessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<sessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: sessionCreateManyUserInputEnvelope
    set?: Enumerable<sessionWhereUniqueInput>
    disconnect?: Enumerable<sessionWhereUniqueInput>
    delete?: Enumerable<sessionWhereUniqueInput>
    connect?: Enumerable<sessionWhereUniqueInput>
    update?: Enumerable<sessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<sessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<sessionScalarWhereInput>
  }

  export type accountUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<accountCreateWithoutUserInput>, Enumerable<accountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<accountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<accountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: accountCreateManyUserInputEnvelope
    set?: Enumerable<accountWhereUniqueInput>
    disconnect?: Enumerable<accountWhereUniqueInput>
    delete?: Enumerable<accountWhereUniqueInput>
    connect?: Enumerable<accountWhereUniqueInput>
    update?: Enumerable<accountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<accountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<accountScalarWhereInput>
  }

  export type sessionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionCreateWithoutUserInput>, Enumerable<sessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<sessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: sessionCreateManyUserInputEnvelope
    set?: Enumerable<sessionWhereUniqueInput>
    disconnect?: Enumerable<sessionWhereUniqueInput>
    delete?: Enumerable<sessionWhereUniqueInput>
    connect?: Enumerable<sessionWhereUniqueInput>
    update?: Enumerable<sessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<sessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<sessionScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedEnumsideNullableFilter = {
    equals?: side | null
    in?: Enumerable<side> | null
    notIn?: Enumerable<side> | null
    not?: NestedEnumsideNullableFilter | side | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumsideNullableWithAggregatesFilter = {
    equals?: side | null
    in?: Enumerable<side> | null
    notIn?: Enumerable<side> | null
    not?: NestedEnumsideNullableWithAggregatesFilter | side | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumsideNullableFilter
    _max?: NestedEnumsideNullableFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type sidesCreateWithoutDebateInput = {
    owner_id?: string | null
    side?: side | null
    topic?: topicCreateNestedOneWithoutSidesInput
  }

  export type sidesUncheckedCreateWithoutDebateInput = {
    id?: number
    topic_id?: number | null
    owner_id?: string | null
    side?: side | null
  }

  export type sidesCreateOrConnectWithoutDebateInput = {
    where: sidesWhereUniqueInput
    create: XOR<sidesCreateWithoutDebateInput, sidesUncheckedCreateWithoutDebateInput>
  }

  export type sidesCreateManyDebateInputEnvelope = {
    data: Enumerable<sidesCreateManyDebateInput>
    skipDuplicates?: boolean
  }

  export type voteCreateWithoutDebateInput = {
    owner_id?: string | null
    topic?: topicCreateNestedOneWithoutVoteInput
  }

  export type voteUncheckedCreateWithoutDebateInput = {
    id?: number
    topic_id?: number | null
    owner_id?: string | null
  }

  export type voteCreateOrConnectWithoutDebateInput = {
    where: voteWhereUniqueInput
    create: XOR<voteCreateWithoutDebateInput, voteUncheckedCreateWithoutDebateInput>
  }

  export type voteCreateManyDebateInputEnvelope = {
    data: Enumerable<voteCreateManyDebateInput>
    skipDuplicates?: boolean
  }

  export type sidesUpsertWithWhereUniqueWithoutDebateInput = {
    where: sidesWhereUniqueInput
    update: XOR<sidesUpdateWithoutDebateInput, sidesUncheckedUpdateWithoutDebateInput>
    create: XOR<sidesCreateWithoutDebateInput, sidesUncheckedCreateWithoutDebateInput>
  }

  export type sidesUpdateWithWhereUniqueWithoutDebateInput = {
    where: sidesWhereUniqueInput
    data: XOR<sidesUpdateWithoutDebateInput, sidesUncheckedUpdateWithoutDebateInput>
  }

  export type sidesUpdateManyWithWhereWithoutDebateInput = {
    where: sidesScalarWhereInput
    data: XOR<sidesUpdateManyMutationInput, sidesUncheckedUpdateManyWithoutSidesInput>
  }

  export type sidesScalarWhereInput = {
    AND?: Enumerable<sidesScalarWhereInput>
    OR?: Enumerable<sidesScalarWhereInput>
    NOT?: Enumerable<sidesScalarWhereInput>
    id?: IntFilter | number
    topic_id?: IntNullableFilter | number | null
    owner_id?: StringNullableFilter | string | null
    debate_id?: IntFilter | number
    side?: EnumsideNullableFilter | side | null
  }

  export type voteUpsertWithWhereUniqueWithoutDebateInput = {
    where: voteWhereUniqueInput
    update: XOR<voteUpdateWithoutDebateInput, voteUncheckedUpdateWithoutDebateInput>
    create: XOR<voteCreateWithoutDebateInput, voteUncheckedCreateWithoutDebateInput>
  }

  export type voteUpdateWithWhereUniqueWithoutDebateInput = {
    where: voteWhereUniqueInput
    data: XOR<voteUpdateWithoutDebateInput, voteUncheckedUpdateWithoutDebateInput>
  }

  export type voteUpdateManyWithWhereWithoutDebateInput = {
    where: voteScalarWhereInput
    data: XOR<voteUpdateManyMutationInput, voteUncheckedUpdateManyWithoutVoteInput>
  }

  export type voteScalarWhereInput = {
    AND?: Enumerable<voteScalarWhereInput>
    OR?: Enumerable<voteScalarWhereInput>
    NOT?: Enumerable<voteScalarWhereInput>
    id?: IntFilter | number
    topic_id?: IntNullableFilter | number | null
    owner_id?: StringNullableFilter | string | null
    debate_id?: IntFilter | number
  }

  export type debateCreateWithoutSidesInput = {
    date?: Date | string | null
    topic_name?: string | null
    vote?: voteCreateNestedManyWithoutDebateInput
  }

  export type debateUncheckedCreateWithoutSidesInput = {
    id?: number
    date?: Date | string | null
    topic_name?: string | null
    vote?: voteUncheckedCreateNestedManyWithoutDebateInput
  }

  export type debateCreateOrConnectWithoutSidesInput = {
    where: debateWhereUniqueInput
    create: XOR<debateCreateWithoutSidesInput, debateUncheckedCreateWithoutSidesInput>
  }

  export type topicCreateWithoutSidesInput = {
    name?: string | null
    owner_id?: string | null
    vote?: voteCreateNestedManyWithoutTopicInput
  }

  export type topicUncheckedCreateWithoutSidesInput = {
    id?: number
    name?: string | null
    owner_id?: string | null
    vote?: voteUncheckedCreateNestedManyWithoutTopicInput
  }

  export type topicCreateOrConnectWithoutSidesInput = {
    where: topicWhereUniqueInput
    create: XOR<topicCreateWithoutSidesInput, topicUncheckedCreateWithoutSidesInput>
  }

  export type debateUpsertWithoutSidesInput = {
    update: XOR<debateUpdateWithoutSidesInput, debateUncheckedUpdateWithoutSidesInput>
    create: XOR<debateCreateWithoutSidesInput, debateUncheckedCreateWithoutSidesInput>
  }

  export type debateUpdateWithoutSidesInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    topic_name?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: voteUpdateManyWithoutDebateInput
  }

  export type debateUncheckedUpdateWithoutSidesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    topic_name?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: voteUncheckedUpdateManyWithoutDebateInput
  }

  export type topicUpsertWithoutSidesInput = {
    update: XOR<topicUpdateWithoutSidesInput, topicUncheckedUpdateWithoutSidesInput>
    create: XOR<topicCreateWithoutSidesInput, topicUncheckedCreateWithoutSidesInput>
  }

  export type topicUpdateWithoutSidesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: voteUpdateManyWithoutTopicInput
  }

  export type topicUncheckedUpdateWithoutSidesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: voteUncheckedUpdateManyWithoutTopicInput
  }

  export type sidesCreateWithoutTopicInput = {
    owner_id?: string | null
    side?: side | null
    debate: debateCreateNestedOneWithoutSidesInput
  }

  export type sidesUncheckedCreateWithoutTopicInput = {
    id?: number
    owner_id?: string | null
    debate_id: number
    side?: side | null
  }

  export type sidesCreateOrConnectWithoutTopicInput = {
    where: sidesWhereUniqueInput
    create: XOR<sidesCreateWithoutTopicInput, sidesUncheckedCreateWithoutTopicInput>
  }

  export type sidesCreateManyTopicInputEnvelope = {
    data: Enumerable<sidesCreateManyTopicInput>
    skipDuplicates?: boolean
  }

  export type voteCreateWithoutTopicInput = {
    owner_id?: string | null
    debate: debateCreateNestedOneWithoutVoteInput
  }

  export type voteUncheckedCreateWithoutTopicInput = {
    id?: number
    owner_id?: string | null
    debate_id: number
  }

  export type voteCreateOrConnectWithoutTopicInput = {
    where: voteWhereUniqueInput
    create: XOR<voteCreateWithoutTopicInput, voteUncheckedCreateWithoutTopicInput>
  }

  export type voteCreateManyTopicInputEnvelope = {
    data: Enumerable<voteCreateManyTopicInput>
    skipDuplicates?: boolean
  }

  export type sidesUpsertWithWhereUniqueWithoutTopicInput = {
    where: sidesWhereUniqueInput
    update: XOR<sidesUpdateWithoutTopicInput, sidesUncheckedUpdateWithoutTopicInput>
    create: XOR<sidesCreateWithoutTopicInput, sidesUncheckedCreateWithoutTopicInput>
  }

  export type sidesUpdateWithWhereUniqueWithoutTopicInput = {
    where: sidesWhereUniqueInput
    data: XOR<sidesUpdateWithoutTopicInput, sidesUncheckedUpdateWithoutTopicInput>
  }

  export type sidesUpdateManyWithWhereWithoutTopicInput = {
    where: sidesScalarWhereInput
    data: XOR<sidesUpdateManyMutationInput, sidesUncheckedUpdateManyWithoutSidesInput>
  }

  export type voteUpsertWithWhereUniqueWithoutTopicInput = {
    where: voteWhereUniqueInput
    update: XOR<voteUpdateWithoutTopicInput, voteUncheckedUpdateWithoutTopicInput>
    create: XOR<voteCreateWithoutTopicInput, voteUncheckedCreateWithoutTopicInput>
  }

  export type voteUpdateWithWhereUniqueWithoutTopicInput = {
    where: voteWhereUniqueInput
    data: XOR<voteUpdateWithoutTopicInput, voteUncheckedUpdateWithoutTopicInput>
  }

  export type voteUpdateManyWithWhereWithoutTopicInput = {
    where: voteScalarWhereInput
    data: XOR<voteUpdateManyMutationInput, voteUncheckedUpdateManyWithoutVoteInput>
  }

  export type debateCreateWithoutVoteInput = {
    date?: Date | string | null
    topic_name?: string | null
    sides?: sidesCreateNestedManyWithoutDebateInput
  }

  export type debateUncheckedCreateWithoutVoteInput = {
    id?: number
    date?: Date | string | null
    topic_name?: string | null
    sides?: sidesUncheckedCreateNestedManyWithoutDebateInput
  }

  export type debateCreateOrConnectWithoutVoteInput = {
    where: debateWhereUniqueInput
    create: XOR<debateCreateWithoutVoteInput, debateUncheckedCreateWithoutVoteInput>
  }

  export type topicCreateWithoutVoteInput = {
    name?: string | null
    owner_id?: string | null
    sides?: sidesCreateNestedManyWithoutTopicInput
  }

  export type topicUncheckedCreateWithoutVoteInput = {
    id?: number
    name?: string | null
    owner_id?: string | null
    sides?: sidesUncheckedCreateNestedManyWithoutTopicInput
  }

  export type topicCreateOrConnectWithoutVoteInput = {
    where: topicWhereUniqueInput
    create: XOR<topicCreateWithoutVoteInput, topicUncheckedCreateWithoutVoteInput>
  }

  export type debateUpsertWithoutVoteInput = {
    update: XOR<debateUpdateWithoutVoteInput, debateUncheckedUpdateWithoutVoteInput>
    create: XOR<debateCreateWithoutVoteInput, debateUncheckedCreateWithoutVoteInput>
  }

  export type debateUpdateWithoutVoteInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    topic_name?: NullableStringFieldUpdateOperationsInput | string | null
    sides?: sidesUpdateManyWithoutDebateInput
  }

  export type debateUncheckedUpdateWithoutVoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    topic_name?: NullableStringFieldUpdateOperationsInput | string | null
    sides?: sidesUncheckedUpdateManyWithoutDebateInput
  }

  export type topicUpsertWithoutVoteInput = {
    update: XOR<topicUpdateWithoutVoteInput, topicUncheckedUpdateWithoutVoteInput>
    create: XOR<topicCreateWithoutVoteInput, topicUncheckedCreateWithoutVoteInput>
  }

  export type topicUpdateWithoutVoteInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    sides?: sidesUpdateManyWithoutTopicInput
  }

  export type topicUncheckedUpdateWithoutVoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    sides?: sidesUncheckedUpdateManyWithoutTopicInput
  }

  export type usersCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    sessions?: sessionCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    sessions?: sessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutAccountsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutAccountsInput, usersUncheckedCreateWithoutAccountsInput>
  }

  export type usersUpsertWithoutAccountsInput = {
    update: XOR<usersUpdateWithoutAccountsInput, usersUncheckedUpdateWithoutAccountsInput>
    create: XOR<usersCreateWithoutAccountsInput, usersUncheckedCreateWithoutAccountsInput>
  }

  export type usersUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: sessionUpdateManyWithoutUserInput
  }

  export type usersUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: sessionUncheckedUpdateManyWithoutUserInput
  }

  export type usersCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: accountCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: accountUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutSessionsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
  }

  export type usersUpsertWithoutSessionsInput = {
    update: XOR<usersUpdateWithoutSessionsInput, usersUncheckedUpdateWithoutSessionsInput>
    create: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
  }

  export type usersUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: accountUpdateManyWithoutUserInput
  }

  export type usersUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: accountUncheckedUpdateManyWithoutUserInput
  }

  export type accountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    oauth_token_secret?: string | null
    oauth_token?: string | null
  }

  export type accountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    oauth_token_secret?: string | null
    oauth_token?: string | null
  }

  export type accountCreateOrConnectWithoutUserInput = {
    where: accountWhereUniqueInput
    create: XOR<accountCreateWithoutUserInput, accountUncheckedCreateWithoutUserInput>
  }

  export type accountCreateManyUserInputEnvelope = {
    data: Enumerable<accountCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type sessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type sessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type sessionCreateOrConnectWithoutUserInput = {
    where: sessionWhereUniqueInput
    create: XOR<sessionCreateWithoutUserInput, sessionUncheckedCreateWithoutUserInput>
  }

  export type sessionCreateManyUserInputEnvelope = {
    data: Enumerable<sessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type accountUpsertWithWhereUniqueWithoutUserInput = {
    where: accountWhereUniqueInput
    update: XOR<accountUpdateWithoutUserInput, accountUncheckedUpdateWithoutUserInput>
    create: XOR<accountCreateWithoutUserInput, accountUncheckedCreateWithoutUserInput>
  }

  export type accountUpdateWithWhereUniqueWithoutUserInput = {
    where: accountWhereUniqueInput
    data: XOR<accountUpdateWithoutUserInput, accountUncheckedUpdateWithoutUserInput>
  }

  export type accountUpdateManyWithWhereWithoutUserInput = {
    where: accountScalarWhereInput
    data: XOR<accountUpdateManyMutationInput, accountUncheckedUpdateManyWithoutAccountsInput>
  }

  export type accountScalarWhereInput = {
    AND?: Enumerable<accountScalarWhereInput>
    OR?: Enumerable<accountScalarWhereInput>
    NOT?: Enumerable<accountScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
    oauth_token_secret?: StringNullableFilter | string | null
    oauth_token?: StringNullableFilter | string | null
  }

  export type sessionUpsertWithWhereUniqueWithoutUserInput = {
    where: sessionWhereUniqueInput
    update: XOR<sessionUpdateWithoutUserInput, sessionUncheckedUpdateWithoutUserInput>
    create: XOR<sessionCreateWithoutUserInput, sessionUncheckedCreateWithoutUserInput>
  }

  export type sessionUpdateWithWhereUniqueWithoutUserInput = {
    where: sessionWhereUniqueInput
    data: XOR<sessionUpdateWithoutUserInput, sessionUncheckedUpdateWithoutUserInput>
  }

  export type sessionUpdateManyWithWhereWithoutUserInput = {
    where: sessionScalarWhereInput
    data: XOR<sessionUpdateManyMutationInput, sessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type sessionScalarWhereInput = {
    AND?: Enumerable<sessionScalarWhereInput>
    OR?: Enumerable<sessionScalarWhereInput>
    NOT?: Enumerable<sessionScalarWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type sidesCreateManyDebateInput = {
    id?: number
    topic_id?: number | null
    owner_id?: string | null
    side?: side | null
  }

  export type voteCreateManyDebateInput = {
    id?: number
    topic_id?: number | null
    owner_id?: string | null
  }

  export type sidesUpdateWithoutDebateInput = {
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    side?: NullableEnumsideFieldUpdateOperationsInput | side | null
    topic?: topicUpdateOneWithoutSidesInput
  }

  export type sidesUncheckedUpdateWithoutDebateInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic_id?: NullableIntFieldUpdateOperationsInput | number | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    side?: NullableEnumsideFieldUpdateOperationsInput | side | null
  }

  export type sidesUncheckedUpdateManyWithoutSidesInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic_id?: NullableIntFieldUpdateOperationsInput | number | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    side?: NullableEnumsideFieldUpdateOperationsInput | side | null
  }

  export type voteUpdateWithoutDebateInput = {
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: topicUpdateOneWithoutVoteInput
  }

  export type voteUncheckedUpdateWithoutDebateInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic_id?: NullableIntFieldUpdateOperationsInput | number | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type voteUncheckedUpdateManyWithoutVoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic_id?: NullableIntFieldUpdateOperationsInput | number | null
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sidesCreateManyTopicInput = {
    id?: number
    owner_id?: string | null
    debate_id: number
    side?: side | null
  }

  export type voteCreateManyTopicInput = {
    id?: number
    owner_id?: string | null
    debate_id: number
  }

  export type sidesUpdateWithoutTopicInput = {
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    side?: NullableEnumsideFieldUpdateOperationsInput | side | null
    debate?: debateUpdateOneRequiredWithoutSidesInput
  }

  export type sidesUncheckedUpdateWithoutTopicInput = {
    id?: IntFieldUpdateOperationsInput | number
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    debate_id?: IntFieldUpdateOperationsInput | number
    side?: NullableEnumsideFieldUpdateOperationsInput | side | null
  }

  export type voteUpdateWithoutTopicInput = {
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    debate?: debateUpdateOneRequiredWithoutVoteInput
  }

  export type voteUncheckedUpdateWithoutTopicInput = {
    id?: IntFieldUpdateOperationsInput | number
    owner_id?: NullableStringFieldUpdateOperationsInput | string | null
    debate_id?: IntFieldUpdateOperationsInput | number
  }

  export type accountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    oauth_token_secret?: string | null
    oauth_token?: string | null
  }

  export type sessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type accountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token_secret?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type accountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token_secret?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type accountUncheckedUpdateManyWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token_secret?: NullableStringFieldUpdateOperationsInput | string | null
    oauth_token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}